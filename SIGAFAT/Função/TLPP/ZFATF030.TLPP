#INCLUDE "TOTVS.CH"
#Include "FWMVCDEF.CH"
#INCLUDE "RESTFUL.CH"
#Include "PROTHEUS.CH"
#INCLUDE "TopConn.ch"
#INCLUDE "MSGRAPHI.CH"
#Include "FWMVCDEF.CH"

#define CRLF chr(13) + chr(10)


/*/{Protheus.doc} ZFATF030
Serviço de integração faturamento para Previsãove Pedido 
Atualização da separação dos orçamentos baixando conforme informaçção recebida
@author 	DAC 
@since 		30/07/2024
@version 	undefined
@param		nao utilizado
@type 		User Function
@client   	CAOA 
@return   	_aMsg - Array com retorno Json código e ocorrencia
@project 	
			https://tdn.totvs.com/display/tec/DecodeUTF8
			https://jsonformatter.curiousconcept.com/  VERIFICAR SE JSON ESTA CORRETO
			https://jsonlint.com/?code=   //VALIDAR JSON
            https://jsoneditoronline.org/#left=local.sowavu  //estrutura do json
/*/


/*/{Protheus.doc} U_XZFT30CH
Verificar saldo de chassi disponivel 		
@author 	CAOA DAC
@since 		
@version 	undefined
@param 		
@type 		Static function
@ Obs		
@history    
/*/
Function U_XZFT30CH(_cProduto, _cLocal, _cNumSerie, _cChassi, _cFabMod, _aCampos)
Local _cQuery 		AS Character
Local _nPos 		AS Numeric

Default _cProduto	:= ""
Default _cLocal 	:= "VN "
Default _cNumSerie	:= ""
Default _cChassi	:= ""
Default _cFabMod    := ""
Default _aCampos    := { 	"VV1.VV1_FILIAL",;
							"SBF.BF_PRODUTO",;
							"VV1.VV1_CHASSI",;
							"VV1.VV1_CODMAR",;
							"VV1.VV1_MODVEI",;
							"VV1.VV1_SEGMOD",;
							"VV1.VV1_FABMOD",;
							"VV1.VV1_CORVEI",;
							"SBF.BF_LOCAL"	,;
							"SBF.BF_LOCALIZ",;
							"SBF.BF_QUANT"	;
						}
    _cQuery := ""
    _cQuery += CrLf + " SELECT A.* "
    _cQuery += CrLf + "  FROM (  "
    _cQuery += CrLf + "      SELECT "

    For _nPos := 1 To Len(_aCampos)
        _cQuery += CrLf + If(_nPos > 1,"    , ","     ")+_aCampos[_nPos]
    Next

	_cQuery += CrLf + "     , SUM(SBF.BF_QUANT) OVER (ORDER BY BF_PRODUTO) AS QTDETOT " 	

    _cQuery += CrLf + "     , (SELECT MAX(SDB.DB_NUMSEQ) "
    _cQuery += CrLf + "          FROM " + RetSqlName("SDB") + " SDB"
    _cQuery += CrLf + "          WHERE  SDB.DB_FILIAL       = '"+xFilial("SDB")+"'"
    _cQuery += CrLf + "             AND SDB.DB_ESTORNO      = ' '"
    _cQuery += CrLf + "             AND SDB.DB_ATUEST       = 'S'"
    _cQuery += CrLf + "             AND SDB.DB_LOCAL        = SBF.BF_LOCAL"
    _cQuery += CrLf + "             AND SDB.DB_LOCALIZ      = SBF.BF_LOCALIZ"
    _cQuery += CrLf + "             AND SDB.DB_NUMSERI      = SBF.BF_NUMSERI"
    _cQuery += CrLf + "             AND SDB.DB_PRODUTO      = SBF.BF_PRODUTO"
    _cQuery += CrLf + "             AND SDB.D_E_L_E_T_      = ' ') DB_NUMSEQ,"
    _cQuery += CrLf + "             NVL((SELECT VB0_DATDES FROM " + RetSqlName("VB0") + "  VB0 "
    _cQuery += CrLf + "                  WHERE VB0.VB0_DATBLO||VB0.VB0_HORBLO =( "
    _cQuery += CrLf + "                                                     SELECT max(VB0A.VB0_DATBLO||VB0A.VB0_HORBLO) as DATBLOQ "
    _cQuery += CrLf + "                                                     FROM " + RetSqlName("VB0") + "  VB0A "
    _cQuery += CrLf + "                                                        WHERE VB0A.VB0_FILIAL = VB0.VB0_FILIAL "
    _cQuery += CrLf + "                                                          AND VB0A.vb0_chaint = VB0.VB0_CHAINT "
    _cQuery += CrLf + "                                                          AND VB0A.D_E_L_E_T_ = ' ') "
    _cQuery += CrLf + "                 AND VB0.VB0_FILIAL = '" + xFilial("VB0") + "' "
    _cQuery += CrLf + "                 AND VB0.VB0_CHAINT = VV1.VV1_CHAINT "
    _cQuery += CrLf + "                 AND VB0.D_E_L_E_T_ = ' '),'99999999') AS VB0_DATDES "
    _cQuery += CrLf + "     , NVL(VRK.VRK_CHASSI,'OK' ) AS CHASSI
//    _cQuery += CrLf + "     , NVL(VV1.VV1_CHASSI,'OK' ) AS CHASSI
    _cQuery += CrLf + " FROM " + RetSqlName("VV1") + " VV1 "
    _cQuery += CrLf + "      INNER JOIN " + RetSqlName("SBF") + " SBF "
    _cQuery += CrLf + "          ON  SBF.BF_FILIAL  = '" + xFilial("SBF") + "'"
    _cQuery += CrLf + "          AND SBF.BF_NUMSERI = VV1.VV1_CHASSI "
    _cQuery += CrLf + "          AND SBF.D_E_L_E_T_ = VV1.D_E_L_E_T_ "
    _cQuery += CrLf + "          AND SBF.BF_QUANT   > 0 "
    _cQuery += CrLf + "          AND SBF.BF_EMPENHO = 0 "
    //_cQuery += CrLf + "          AND SBF.BF_PRODUTO = '" + (cCabAlias)->C6_PRODUTO + "' "
    //_cQuery += CrLf + "          AND SBF.BF_LOCAL   = '" + (cCabAlias)->C6_LOCAL   + "' "
	If !Empty(_cProduto)
		_cQuery += CrLf + "		    AND SBF.BF_PRODUTO = '" +_cProduto+"' "	
	Endif	
	If !Empty(_cLocal)
    	_cQuery += CrLf + "         AND SBF.BF_LOCAL   = '" +_cLocal+ "' "					
    Endif	
    If !Empty(Alltrim(_cNumSerie))
        _cQuery += CrLf + "         AND SBF.BF_NUMSERI      = '" + _cNumSerie + "' "
    EndIf
	_cQuery += CrLf + "      LEFT JOIN " + RetSqlName("VRK") + " SC6 "
    _cQuery += CrLf + "          ON  SC6.C6_FILIAL   = '" + xFilial("SC6") + "' "
    _cQuery += CrLf + "          AND SC6.C6_XCHASSI  = VV1.VV1_CHASSI "
    _cQuery += CrLf + "          AND SC6.D_E_L_E_T_ = ' ' "
 
    _cQuery += CrLf + "      WHERE   VV1.VV1_FILIAL      = '" + xFilial("VV1") + "' "
    //_cQuery += CrLf + "          AND VV1.VV1_CHASSI      = '" +cChassi+ "' "
    _cQuery += CrLf + "          AND VV1.VV1_SITVEI      = '0' "
    _cQuery += CrLf + "          AND VV1.VV1_IMOBI       = '0' "
    _cQuery += CrLf + "          AND VV1.VV1_FABMOD      = '" + _cFabMod + "' "
    _cQuery += CrLf + "          AND VV1.D_E_L_E_T_      = ' ') A "
    _cQuery += CrLf + " WHERE A.VB0_DATDES > '        ' "
    _cQuery += CrLf + "   AND A.CHASSI     = 'OK' " 
    _cQuery += CrLf + " ORDER BY A.VV1_FILIAL,A.BF_PRODUTO,A.DB_NUMSEQ,A.VV1_CHASSI "
Return _cQuery



/*/{Protheus.doc} U_ZFTF30EP
Realiza o Empenho 		
@author 	CAOA DAC
@since 		
@version 	undefined
@param 		_nOpcEmp = 1 Criar Empenho
            _nOpcEmp = 2 Retirar Empenho
@type 		Static function
@ Obs		
@history    
/*/
Function U_ZFTF30EP( _oSay, _nOpcEmp, _cFilPrev, _cCodPrev, _nRegZZP, _nQtde, _lJob, _aRetMsg )
Local _cAliasEmp	:= GetNextAlias()   AS Character
Local _lRet 		:= .T.              AS Logical
Local _cCampos		:= ""               AS Character
Local _cWhere		:= ""               AS Character
Local _cJoinSC6     := "                AS Character
Local _aPrevisao 	:= {}               AS Array
Local _nRow			:= 0                AS Numeric

Default _nOpcEmp	:= 0                
Default	_cFilPrev   := FwxFilial("ZZP") 
Default _cCodPrev   := ""
Default _nRegZZP 	:= 0
Default _nQtde		:= 0
Default _lJob 		:= IsBlind() 
Default _aRetMsg   := {}

Begin Sequence
	//nao pode vir em branco
	iF Empty(_cCodPrev)
		If _lJob
	    	ApMsgStop("Codigo previsao em branco, verificar com ADM Sistemas", "Previsão Faturamento")
		Endif	
		_lRet	:=  .F.
		Break 
	Endif

	_cWhere := " "
	If _nRegZZP > 0
		_cWhere	+= CRLF + " AND ZZP.R_E_C_N_O_ = "+AllTrim(Str(_nRegZZP))
	Else
		_cWhere 	+= CRLF +"		AND ZZP.ZZP_FILIAL = '"+_cFilPrev+"' "
    	_cWhere 	+= CRLF + "     AND ZZP.ZZP_CODPRV = '"+_cCodPrev+"' " 
	Endif 
	If _nQtde > 0
		_nRow		:= _nQtde + 1
		_cWhere	    += CRLF + " AND ROWNUM 	<  "+AllTrim(Str(_nRow))
	Endif 
	If !Empty(_cWhere)
		_cWhere	+= CRLF
	Endif
	_cWhere := "%"+_cWhere+"%"

	//incluir empenho 
	_cJoinSC6 := ""
	If _nOpcEmp == 1  
		_cJoinSC6	+= CRLF + " AND SC6.C6_CHASSI = ' '  "
	//Retirar empenho 
	ElseIf  _nOpcEmp == 2
		_cJoinSC6	+= CRLF + " AND SC6.C6_CHASSI  <> ' '  "
	Endif 
	//Qtde de colunas, quando informado este campo será validado até a quantidade enviada
	//Acrescentar  + 1 no select não valida = somente > ou <

	If !Empty(_cJoinSC6)
		_cJoinSC6	+= CRLF
	Endif
	_cJoinSC6 := "%"+_cJoinSC6+"%"

	BeginSql Alias _cAliasEmp //Define o nome do alias temporário 
        %NoParser%
		WITH PEDIDOS_FAT AS (
								SELECT 	C6_NUM
                                        , C6_ITEM
                                        , SC6.C6_CHASSI
                                        , SC6.R_E_C_N_O_ NREGSC6 
                                        , SC5.R_E_C_N_O_ NREGSC5
								FROM  	%Table:ZZP% ZZP 
   								JOIN 	%Table:SC6% SC6
									ON  SC6.%notDel% 
									AND SC6.C6_FILIAL 	= %xFilial:SC6%  
									AND SC6.C6_XFILPVR 	= ZZP.ZZP_FILIAL  
									AND SC6.C6_XCODPVR 	= ZZP.ZZP_CODPRV
 									AND SC6.C6_CLI  	= ZZP.ZZP_CODCLI 
									AND SC6.C6_LOJA  	= ZZP.ZZP_LOJCLI 
 									AND SC6.C6_PRODUTO  = ZZP.ZZP_CODPRD 
									AND SC6.C6_XFABMOD	= ZZP.ZZP_FABMOD
									AND SC6.C6_NOTA 	= ' '   
 									%Exp:_cJoinSC6%
                                JOIN    %Table:SC5% SC5 
                                    ON  SC5.%notDel%
									AND SC5.C5_FILIAL 	= %xFilial:SC5%  
									AND SC5.C5_NUM 	    = SC6.C6_NUM  
								WHERE  	ZZP.%notDel% 
										%Exp:_cWhere%
								) 
		SELECT  PEDIDOS_FAT.* 
				%Exp:_cCampos% 
		FROM PEDIDOS_FAT		
		ORDER BY C6_NUM, C6_ITEM	
	EndSql
	iF (_cAliasEmp)->(Eof()) 
		If _lJob
	    	ApMsgStop("Não localizado registros para serem empenhados nos pedidos", "Previsão Faturamento")
		Endif	
		_lRet	:=  .F.
		Break 
	Endif  
	If _nOpcEmp == 1
		_aPrevisao := U_ZFTF30E1(_oSay, _cAliasEmp, /*_nLimChassi*/, _lJob, _aRetMsg )
		If Len(_aPrevisao) == 0 
			_cMens := "Não foi possivel realizar empenho XZFT19EP, verificar com ADM Sistemas"
			Aadd(_aRetMsg, _cMens)
			If _lJob
	    		ApMsgStop(_cMens, "Previsao Faturamento")
			Endif
			_lRet := .F. 
			Break
		Endif  
	ElseIf _nOpcEmp == 2
		U_XZFT19ET(_cAliasEmp)   //localizado em ZFATF019
	Endif
End Sequence
If Select(_cAliasEmp) <> 0
	(_cAliasEmp)->(DbCloseArea())
	Ferase(_cAliasEmp+GetDBExtension())
Endif

Return _lRet 


/*/{Protheus.doc} U_ZFTF30E1
Realiza o Empenho  de acordo com a seleção recebida		
@author 	CAOA DAC
@since 		
@version 	undefined
@param 		_cAlias     = Pre selecao realizado baseado no SC6
            _nLimChassi = Qtde de limite, utilizado se possuo 10 mas somente irei realizar empenho de 2 envio na posição _nLimChassi 2
            _lJob       = Indica se esta sendo rodada por job
            _aRetMsg   = Mensagens de erro geradas no processo sera retornado caso informado no parametro @
            _oSay       = Objeto para visualização de processamento
@type 		User function
@ Obs		
@history    
/*/
Function U_ZTF30EMP(_cFilPed, _cPedido, _cItem, _nLimChassi, _lJob, _aRetMsg, _oSay )
Local _lLiber                       As Logical
Local _lParcial                     As Logical
Local _lTrans                       As Logical
Local _lCredito                     As Logical
Local _lEstoque                     As Logical
Local _lAvCred                      As Logical
Local _lAvEst                       As Logical
Local _lItLib                       As Logical
Local _lLibPed                      As Logical

Local _cAliasEmp                    As Character
Local _cAliasCH                     As Character
Local _cMens                        As Character
Local _cCC_STATUS                   As Character    
Local _cWhere                       As Character    

Local _nQtdeChassi                  As Numeric
Local _nQtdLib                      As Numeric
Local _nLinhas                      As Numeric

Local _aPrevisao                    As Array

Default _cAlias     := ""                  //  ter um retorno da função GAP167  Previsao de Faturamento
Default _cFilPed    := FwxFilial("SC6")
Default _cPedido    := ""
Default _cItem      := ""
Default _nLimChassi := 0            
Default _lJob       := IsBlind()    
DeFault _aRetMsg    := {}           
//DeFault _oSay  As Object

Begin Sequence
    _cAliasEmp := GetNextAlias() 
    _cWhere := ""

    If Empty(_cPedido)
       _cMens := "Falta informação do parametro Pedido para Empenho"
        Aadd( _aRetMsg, _cMens)
		Break 
	Endif  

	_cWhere :=	"	        AND SC6.C6_FILIAL 	= "+_cFilPed
    _cWhere :=  "           AND SC6.C6_NUM      = "+_cPedido
    If Empty(_cItem)
        _cWhere := "        AND SC6.C6_ITEM     = "+_cItem
    Endif    
	_cWhere := "%"+_cWhere+"%"
	BeginSql Alias _cAliasEmp //Define o nome do alias temporário 
        %NoParser%
		SELECT 	C6_NUM
                , C6_ITEM
                , SC6.C6_CHASSI
                , SC6.R_E_C_N_O_ NREGSC6 
                , SC5.R_E_C_N_O_ NREGSC5
   		FROM  	%Table:SC6% SC6
        JOIN    %Table:SC5% SC5 
                ON  SC5.%notDel%
				AND SC5.C5_FILIAL 	= %xFilial:SC5%  
				AND SC5.C5_NUM 	    = SC6.C6_NUM  
		WHERE  	SC6.%notDel% 
			    %Exp:_cWhere%
		ORDER BY SC6.C6_NUM, SC6.C6_ITEM	
	EndSql
	If (_cAliasEmp)->(Eof()) 
        _cMens := "Não localizado registros para o Pedido "+_cFilPed+"-"+_cPedido+" para Empenho"
        Aadd( _aRetMsg, _cMens)
		Break 
	Endif  

    _cAliasCH := GetNextAlias()  //Carregar novo select a ser realizado    
    While (_cAliasEmp)->(!Eof()) .and. If(_nLimChassi > 0, _nLinhas <= _nLimChassi,.T.)
        SC6->(DbGoto((_cAliasEmp)->NREGSC6))    
        SC5->(DbGoto((_cAliasEmp)->NREGSC5))    
        SB1->(DbSetOrder(1))

        If ! _lJob 
            oSay:SetText("Preparando pedido: " + (_cAliasEmp)->C6_NUM+" ...")
   	        ProcessMessage()
        Endif 

        If Select(_cAliasCH) <> 0
	        (_cAliasCH)->(DbCloseArea())
        Endif    
	    _cQuery  := U_XZFT30CH(SC6->C6_PRODUTO      ;
                                , /*_cLocal*/       ;
                                , /*_cNumSerie*/    ;
                                , /*cChassi*/       ;
                                , SC6->C6_XFABMOD   ;   
                                , /*_aCampos*/)     
	    TcQuery _cQuery new alias (_cAliasCH)
	    DbSelectArea(_cAliasCH)
	    If (_cAliasCH)->(!Eof())
	        (_cAliasCH)->(DbGotop())
	        Count To _nQtdeChassi	  //Conta quantos chassis estão disponiveis
	        (_cAliasCH)->(DbGotop())
	    Endif
        (_cAliasCH)->(DbGotop())
        //não existe saldo em Chassim
        If _nQtdeChassi == 0
            _cMens := "Item "+SC6->C6_ITEM+" referente ao Pedido "+SC6->C6_NUM+" não localizado Chassi disponivel para Empenho"
            Aadd( _aRetMsg, _cMens)
            (_cAliasEmp)->(DbSkip())
            Loop  
        Endif

        // Define Variaveis usados pelo MATA440 *
        _lLiber   := .T.
        _lParcial := .T.
        _lTrans   := .F.
        _lCredito := .T.
        _lEstoque := .T.
        _lAvCred  := .T.
        _lAvEst   := .T.
        _lItLib   := .T.
        _lLibPed  := .F.
    
        // Posiciona registros para efetuar a liberacao *
        SB1->(DbSeek(xFilial("SB1")+SC6->C6_PRODUTO))
        If Empty(SC5->C5_STATUS)
            RecLock("SC5",.F.)
            SC5->C5_STATUS := "XX"
            SC5->(MsUnlock())
        EndIf

        //Efetua a Liberacao por item *
        _nQtdLib   := SC6->C6_QTDLIB
        _nQtdLib   := MaLibDoFat(SC6->(RecNo())  ;
                                , _nQtdLib      ;
                                , @_lCredito    ;    
                                , @_lEstoque    ;
                                , _lAvCred      ;
                                , _lAvEst       ;
                                , _lLiber       ;
                                , _lTrans)

        SDC->(DbSetOrder(1))
        SDC->(DbGoTop())
        //BF LOCALIZADA NA QUERY CHASSI DISPONIVES
        If !SDC->(DbSeek(xFilial("SDC")+SC6->C6_PRODUTO         ;
                                      +SC6->C6_LOCAL            ;
                                      +"SC6"                    ;
                                      +SC6->C6_NUM              ;
                                      +SC6->C6_ITEM             ;
                                      +SC9->C9_SEQUEN           ;
                                      +CriaVar("DC_LOTECTL")    ;
                                      +CriaVar("DC_NUMLOTE")    ;
                                      +(_cAliasCH)->BF_LOCALIZ  ;
                                      +(_cAliasCH)->VV1_CHASSI))
            _cMens := "Item "+SC6->C6_ITEM+" referente ao Pedido "+SC6->C6_NUM+" não localizado Saldo Chassi Pedido para Empenho "
            Aadd( _aRetMsg, _cMens)
            (_cAliasEmp)->(DbSkip())
            Loop  
        Endif    

        //SC9->(a460Estorna(.T.))  Caso queira estornar liberações
        //Tabela SCC não é gerada
        If Empty(Alltrim(SC9->C9_BLCRED)) .And. Empty(Alltrim(SC9->C9_BLEST )) .And. Empty(Alltrim(SC9->C9_BLWMS ))
            cCC_STATUS  := "1"
        ElseIf SC9->C9_BLCRED == "01" ; _cCC_STATUS  := "2"
        ElseIf SC9->C9_BLCRED == "04" ; _cCC_STATUS  := "3"
        ElseIf SC9->C9_BLCRED == "05" ; _cCC_STATUS  := "4"
        ElseIf SC9->C9_BLCRED == "06" ; _cCC_STATUS  := "5"
        ElseIf SC9->C9_BLCRED == "09" ; _cCC_STATUS  := "6"
        ElseIf SC9->C9_BLEST  == "02" ; _cCC_STATUS  := "7"
        ElseIf SC9->C9_BLEST  == "03" ; _cCC_STATUS  := "8"
        ElseIf SC9->C9_BLWMS  == "01" ; _cCC_STATUS  := "9"
        ElseIf SC9->C9_BLWMS  == "02" ; _cCC_STATUS  := "A"
        ElseIf SC9->C9_BLWMS  == "03" ; _cCC_STATUS  := "B"
        ElseIf SC9->C9_BLWMS  == "05" ; _cCC_STATUS  := "C"
        ElseIf SC9->C9_BLWMS  == "06" ; _cCC_STATUS  := "D"
        ElseIf SC9->C9_BLWMS  == "07" ; _cCC_STATUS  := "E"
        EndIf

        If _cCC_STATUS <> "1"
            _cMens := "Item "+SC6->C6_ITEM+" referente ao Pedido "+SC6->C6_NUM+" não liberado na liberação Pedido para Empenho "
            Aadd( _aRetMsg, _cMens)
            (_cAliasEmp)->(DbSkip())
            Loop  
        Endif                                                

        If ! SC6->(RecLock("SC6",.F.))
            _cMens := "Item "+SC6->C6_ITEM+" referente ao Pedido "+SC6->C6_NUM+" não foi possivel acessar tabela de item (SC6) Pedido para Empenho "
            Aadd( _aRetMsg, _cMens)
            (_cAliasEmp)->(DbSkip())
            Loop  
        Endif
        SC6->C6_CHASSI := (cTmpAlias)->VV1_CHASSI
        SC6->(MsUnlock())

        If !SC9->(RecLock("SC9",.F.))
            _cMens := "Item "+SC6->C6_ITEM+" referente ao Pedido "+SC6->C6_NUM+" não foi possivel acessar tabela de liberação (SC9) Pedido para Empenho "
            Aadd( _aRetMsg, _cMens)
            (_cAliasEmp)->(DbSkip())
            Loop  
        Endif
        SC9->C9_XCODMAR := SC6->VRK_CODMAR 
        SC9->C9_XMODVEI := SC6->VRK_MODVEI
        SC9->C9_XSEGMOD := SC6->VRK_SEGMOD
        SC9->C9_XFABMOD := SC6->VRK_FABMOD
        SC9->C9_XCORINT := SC6->VRK_CORINT
        SC9->C9_XCOREXT := SC6->VRK_COREXT
        SC9->C9_XGRPMOD := ""
        If Empty(SC9->C9_SEQUEN)
            SC9->C9_SEQUEN  := SDC->DC_SEQ
        EndIf
        SC9->(MsUnLock())
        //DBCommitAll()
        Aadd(_aPrevisao, SC6->(Recno()))
        _nLinhas ++      //	//Atualização realizada pela Totvs, acrescentada na lógica DAC 14/05/2024

        (_cAliasEmp)->(DbSkip())
    EndDo
End Sequence 
Return _aPrevisao



#INCLUDE "TOTVS.CH"
#Include "FWMVCDEF.CH"
#INCLUDE "RESTFUL.CH"
#Include "PROTHEUS.CH"
#INCLUDE "TopConn.ch"
#INCLUDE "MSGRAPHI.CH"
#Include "FWMVCDEF.CH"

#define CRLF chr(13) + chr(10)


/*/{Protheus.doc} ZFATF030
Contem funcionalidades que trabalham junto com SIGAVEI
Serviço de integração faturamento para Previsãove Pedido 
Atualização da separação dos orçamentos baixando conforme informaçção recebida
@author 	DAC 
@since 		30/07/2024
@version 	undefined
@param		nao utilizado
@type 		User Function
@client   	CAOA 
@return   	
@project 	GAP228 -Integração Faturamento Autoware
/*/



/*/{Protheus.doc} U_ZFT030GP Gravar Pedido funcionalidade chamada por JOB
Modelo de Dados 		
@author 	DAC
@since 		
@version 	undefined
@param 		
@type 		Static function
@ Obs		GAP228 -Integração Faturamento Autoware
@history    
/*/
FUNCTION U_ZFT030GP( _cPedCli, _cCgc, _aCabPed, _aItens,  _nOpc, _cEmpresa, _cFilial )
Local _cError 		As Character
Local _cNumPed		As Character
Local _cItem		As Character

Local _aError 		As Array	
Local _aGrvItens	As Array	
Local _aItemRet		As Array
Local _aDctos 		As Array

Local _lRet 		As Logical
Local _lJob 		As Logical	
Local _lNovo		As Logical	
Local _lBloqueado	As Logical

//Local _nStatus 		AS Numeric 
Local _nQtdeItem	As Numeric
Local _nPosItem		As Numeric
Local _nPosQtdItem	As Numeric
Local _nPosCpo		As Numeric
Local _nPos     	As Numeric 
Local _nCount     	As Numeric 
Local _nQtdeEmp		As Numeric	
Local _nPosIdItem	As Numeric

Local _cIdItem

Default _cPedCli 	:= "" 
Default _cCgc		:= ""
Default _aCabPed 	:= {} 
Default _aItens		:= {} 
Default _nOpc  		:= 0
Default _cMsg 	 	:= ""
Default _cEmpresa	:= "" 
Default _cFilial    := ""

Private _aRetMsg := ZRESTPRVMsg()   As Array     //Carregar tabela com erros
Private _aMsgRet := {}				As Array    //carregar msg de errp


Begin Sequence
	//se for JOB	
	_aDctos 	:= {} 
	_aItemRet	:= {}
	_lJob		:= IsBlind()
	If _lJob 
		//Tratar abertura da empresa conforme enviado no parametro
		Conout("U_ZFT030GP - Iniciando JOB")
		If Type("cEmpAnt") <> "C" .or. cEmpAnt <> _cEmpresa .or. cFilAnt <> _cFilial
			Conout("U_ZFT030GP - Abrindo empresa "+_cEmpresa+" Filial "+_cFilial)
			RpcClearEnv() 
			RPCSetType(3) 
			RpcSetEnv(_cEmpresa,_cFilial,,,,GetEnvServer(),{ })
		EndIf
	Endif

	_lRet 	:= .F.
	Aadd( _aDctos, {"pedidovei"		, _cPedCli})
	Aadd( _aDctos, {"cnpjcpf"		, _cCgc}) 
	Aadd( _aDctos, {"previsaonr"	, "" }) 


 	If Empty(_cPedCli) 	.Or. Len(_aCabPed) == 0 .Or. Len(_aItens) == 0 .Or. _nOpc == 0
		_cError := "Problemas com parametros na rotina U_ZFT030GP"
		U_ZRETMsgJson("erropad",_cError)
		Break 
	Endif 

	DbSelectArea("SC5")
	_lBloqueado		:= .F.
	_aRetMsg 		:= {}  //Gravar os retornos
	_lNovo 			:= If(_nOpc == 3, .T., .F.)
	_cNumPed		:= ""
	_nPosItem		:= 0
	_nPosQtdItem	:= 0
	_nPosIDitem		:= 0

	//Guardar o Numero do Pedido
	_nPosCpo := Ascan(_aCabPed,{|x| x[1] == "C5_NUM"})
	If _nPosCpo == 0 
		_cError := "Nao localizado campo ref ao numero pedido na rotina ZFT030GP"
		U_ZRETMsgJson("pedidovei",_cError)
		Break 
	Endif	
	If _lNovo
		_cNumPed := GetSxeNum("SC5","C5_NUM")
	Else 
		_cNumPed := SC5->C5_NUM	
	Endif
	_aCabPed[_nPosCpo,2] := _cNumPed
	//Verificar posição para localizar itens
	For _nPos := 1 To Len(_aItens[1])
		If _aItens[1, _nPos, 1] == "C6_ITEM"
			_nPosItem := _nPos 
		Endif	
		If _aItens[1, _nPos, 1] == "C6_QTDVEN"
			_nPosQtdItem := _nPos 
		Endif	
		If _aItens[1, _nPos, 1] == "C6_XIDITEM"
			_nPosIdItem := _nPos 
		Endif	
		If _nPosItem > 0 .And. _nPosQtdItem > 0 .And. _nPosIdItem > 0
			Exit
		Endif
	Next 
	If _nPosItem == 0 .Or. _nPosQtdItem == 0 
		_cError := "Nao localizado referencia a item e ou qtde do item na rotina ZFT030GP"
		U_ZRETMsgJson("qtdeitem",_cError)
		Break 
	Endif	
	
	//Private lMsHelpAuto 	:= .T.  // força a gravação das informações de erro em array para manipulação da gravação ao invés de gravar direto no arquivo temporário 
	Private lMsErroAuto 	:= .F.	// variável que define que o help deve ser gravado no arquivo de log e que as informações estão vindo à partir da rotina automática.
	Private lAutoErrNoFile 	:= .T.  //Variavel de Controle do GetAutoGRLog

	//Será processado produto a produto Fazer Ajustes
	DbSelectArea("SC6")
	_cItem		:= CriaVar("C6_ITEM")
	_aGrvItens 	:= {}
    For _nCount := 1 To Len(_aItens) 
		_nQtdeItem	:= _aItens[_nCount, _nPosQtdItem, 2]  //_aItens[1][21][2] ="20242025"
		For _nPos := 1 To _nQtdeItem
			_cItem 			:= Soma1(_cItem)  
			_cIdItem 		:= _aItens[_nCount, _nPosIdItem, 2] 	 //Atualiza o numerdo do item  
			_aItens[_nCount, _nPosItem,2] 		:= _cItem  //Atualiza o numerdo do item  
			_aItens[_nCount, _nPosQtdItem, 2] 	:= 1  //Atualiza o numerdo do item  
			AAdd(_aGrvItens, Aclone(_aItens[_nCount]))
		Next _nPos	
		//Guardar as referencias para retorno json
		U_ZRETMsgJson("ok", "Item Pedido recebido com Sucesso")
		Aadd( _aItemRet, {"iditem"				, _cIdItem})
		Aadd( _aItemRet, {"status"				, _aMsgRet[Len(_aMsgRet),1]})
		Aadd( _aItemRet, {"ocorrencia"			, _aMsgRet[Len(_aMsgRet),2]})
		Aadd( _aItemRet, {"qtderecebida"		, _nQtdeItem })
		Aadd( _aItemRet, {"qtdeocorrencia"		, 0 })
		Aadd( _aItemRet, {"qtdefaturada"		, 0 })
		Aadd( _aItemRet, {"notafiscalnr"		, ""})
		Aadd( _aItemRet, {"notafiscalserie"		, ""})
		Aadd( _aItemRet, {"notafiscalemissao"	, "" })
		Aadd( _aItemRet, {"notafiscalxml"		, ""})
	Next _nCount 
	lMsErroAuto 	:= .F.	// variável que define que o help deve ser gravado no arquivo de log e que as informações estão vindo à partir da rotina automática.
	lAutoErrNoFile 	:= .T.  //Variavel de Controle do GetAutoGRLog
	
	MSExecAuto({|a, b, c, d| MATA410(a, b, c, d)}, _aCabPed, _aGrvItens, _nOpc , .F.)
	If lMsErroAuto
		_aError	:= {}
		_cError := "Erro Padrao Pedido "+ _cPedCli + CRLF
		// se estiver em debug, pega o log inteiro do erro para uma analise mais detalhada
		_aError := GetAutoGRLog()
		For _nPos := 1 To Len(_aError)
			If !Empty((AllTrim(_aError[_nPos])))  	
				_cError	+= 	Upper(AllTrim(_aError[_nPos])) + CRLF
			EndIf		
		Next _nPos			
		RollBackSX8()
		//Caso tenha erro será abortado neste momento devo atualizar os retornos dos itens
		U_ZRETMsgJson("erropad",_cError)
		_nStatus	:= _aMsgRet[Len(_aMsgRet),1]
		For _nPos := 1 To Len(_aMsgRet)
			_aItemRet[_nPos,2] 	:=  _nStatus	//status
			_aItemRet[_nPos,3]  :=  _cError		//ocorrencia
			_aItemRet[_nPos,5] 	:=  _nQtdeItem	//qtdeocorrencia
		Next	
		Break
	Endif
	_lRet := .T.
	ConfirmSX8()
	//Selecionar Chassis
	//Neste Caso nao ira abortar processo somente avisara que possui itens que nao tem chassi ou ocorrerão erros na seleção do chassi
	_nQtdeEmp := 0  //Qtde empenhada
	U_ZTF30EMP(SC5->C5_FILIAL, SC5->C5_NUM, /*_cItem*/, /*_nLimChassi*/, @_nQtdeEmp, _lJob,  /*_oSay*/ )
End Sequence
//Caso ocorra rros antes do execauto
If Len(_aItemRet) == 0
	Aadd( _aItemRet, {"iditem"			, StrZero(9,10)})
	Aadd( _aItemRet, {"status"			, _aMsgRet[Len(_aMsgRet),1]})
	Aadd( _aItemRet, {"ocorrencia"		, _aMsgRet[Len(_aMsgRet),2]})
	Aadd( _aItemRet, {"qtderecebida"	, 0 })
	Aadd( _aItemRet, {"qtdeocorrencia"	, 0 })
	Aadd( _aItemRet, {"qtdefaturada"	, 0 })
Endif
//Carregar informações dos documentos a serem enviados
_lRet := U_ZFT030CT( _aDctos, _aItemRet, /*_lJob*/)



Return Nil	



/*/{Protheus.doc} U_ZFT030CT Enviar retorno  do processo para Autoware
Modelo de Dados 		
@author 	DAC
@since 		
@version 	undefined
@param 		
@type 		Static function
@ Obs		GAP228 -Integração Faturamento Autoware
@history    
/*/

FUNCTION U_ZFT030CT( _aCab, _aItemRet, _lJob)
Local _oJsonRet 	AS Object
Local _nPosCpo 		As Numeric
Local _lRet			As Logical
//Local _cUsuario		:= SuperGetMV( "CMV_WSR009"  ,,"caoa.totvs" )  //Alltrim(Getmv("CMV_WSR009"))  
//Local _cSenha	 		:= SuperGetMV( "CMV_WSR010"  ,,"CAgka2694X" )	//Alltrim(Getmv("CMV_WSR010"))  

Default _aCab 		:= {}
Default _aItemRet	:= {}
Default _lJob 		:= IsBlind()

	If Len(_aCab) .Or. Len(_aItemRet)
		_cError := "Nao Informado cabeçalho e ou item "
		U_ZRETMsgJson("errointerno",_cError)
		Return .F.
	Endif
    _oJsonRet 				:= JsonObject():new()
	//_oJsonRet['usuario']	:= _cUsuario
	//_oJsonRet['senha']		:= _cSenha
    //_oJsonRet['pedido'] 	:= JSonObject():New()
	_oJsonRet['pedidovei']			:= If( (_nPosCpo := Ascan(_aDctos,{|x| x[1] == "pedidovei"})) > 0			, _aDctos[_nPosCpo,2],"" )
	_oJsonRet['cnpjcpf']			:= If( (_nPosCpo := Ascan(_aDctos,{|x| x[1] == "cnpjcpf"})) > 0				, _aDctos[_nPosCpo,2],"" )
	_oJsonRet['previsaonr']			:= If( (_nPosCpo := Ascan(_aDctos,{|x| x[1] == "previsaonr"})) > 0			, _aDctos[_nPosCpo,2],"" )
	//criar itens
	_oJson['item']  				:= ZWSR007ITE( _oJsonRet, _aItemRet)

	_lRet := ZWSRENVPOS( _oJsonRet, _lJob)
Return _lRet


//Carregar o itens do envio
Static Function ZWSR007ITE( _oJsonRet, _aItemRet)
Local _aItens 		As Array
Local _nPos			As Numeric
Local _nPosCpo		As Numeric
Local _nPosArr 		As Numeric

	_aItens 		:= {}
	For _nPos := 1 To Len(_aItemRet)
    	Aadd(_aItens,JsonObject():new())
    	_nPosArr := Len(_aItens)
		_aItens[_nPosArr] ['iditem']				:= If( (_nPosCpo := Ascan(_aItemRet[_nPos],{|x| x[1] == "iditem"})) > 0				, _aItemRet[_nPosCpo,2],999 )
		_aItens[_nPosArr] ['status']				:= If( (_nPosCpo := Ascan(_aItemRet[_nPos],{|x| x[1] == "status"})) > 0				, _aItemRet[_nPosCpo,2],999 )
		_aItens[_nPosArr] ['ocorrencia']			:= If( (_nPosCpo := Ascan(_aItemRet[_nPos],{|x| x[1] == "ocorrencia"})) > 0			, _aItemRet[_nPosCpo,2],"" )
		_aItens[_nPosArr] ['qtderecebida']			:= If( (_nPosCpo := Ascan(_aItemRet[_nPos],{|x| x[1] == "qtderecebida"})) > 0		, _aItemRet[_nPosCpo,2],0 )
		_aItens[_nPosArr] ['qtdeocorrencia']		:= If( (_nPosCpo := Ascan(_aItemRet[_nPos],{|x| x[1] == "qtdeocorrencia"})) > 0		, _aItemRet[_nPosCpo,2],0 )
		_aItens[_nPosArr] ['qtdefaturada']			:= If( (_nPosCpo := Ascan(_aItemRet[_nPos],{|x| x[1] == "qtdefaturada"})) > 0		, _aItemRet[_nPosCpo,2],0 )

		_aItens[_nPosArr] ['notafiscalnr']			:= If( (_nPosCpo := Ascan(_aItemRet[_nPos],{|x| x[1] == "notafiscalnr"})) > 0		, _aItemRet[_nPosCpo,2],"" )
		_aItens[_nPosArr] ['notafiscalserie']		:= If( (_nPosCpo := Ascan(_aItemRet[_nPos],{|x| x[1] == "notafiscalserie"})) > 0	, _aItemRet[_nPosCpo,2],"" )
		_aItens[_nPosArr] ['notafiscalemissao']		:= If( (_nPosCpo := Ascan(_aItemRet[_nPos],{|x| x[1] == "notafiscalemissao"})) > 0	, _aItemRet[_nPosCpo,2],"" )
		_aItens[_nPosArr] ['notafiscalxml']			:= If( (_nPosCpo := Ascan(_aItemRet[_nPos],{|x| x[1] == "notafiscalxml"})) > 0		, _aItemRet[_nPosCpo,2],"" )
 	Next _nPos	
    //Gravar dados em tabela de log	
Return _lRet


// Envio do Picking para carregamento
Static Function ZWSRENVPOS( _oJson, _lJob) //zPostRg(_oJson)  
Local _lRet 		As Logical
Local _cUrl			As Character
//Local _cPathUrl    As Character	
Local _aHeader     	As Character
Local _cHeaderGet  	As Character  
Local _cApi 		As Character
Local _cJson 		As Character	
Local _cError		As Character
Local _nCont		As numeric
Local _nTempo		As numeric
Local _oJsRet		As Object        
Local _aMsgRet		As Array	
Local _cRes        	

_lRet 			:= .F.
_cUrl			:= Alltrim(Getmv("CMV_WSR001"))  //"wmsapi.rgtracking.com.br:8080/interfacewis/entrada/pedido/"
//_cPathUrl    	:= Alltrim(Getmv("CMV_WSR002"))  //interfacewis/entrada/pedido
_aHeader     	:= {"Content-Type: application/json; charset=utf-8"}  //"Content-Type: application/json"
_cRes        	:= Nil
_cHeaderGet  	:= ""  
_nCont			:= 0
_cApi 			:= SubStr( _cUrl, At("/", _cUrl) )
_nTempo			:= 3	//reduzido o tempo pois podera tentar enviar novamente apÃ³s o final do processamento ZPECF08
_cJson 	   		:= ""
_aMsgRet		:= {}

Begin Sequence
	If Empty(_cUrl)
		Aadd(_aMsgRet,{999,"Erro Retorno Padrao, nao esta informada URL"})
		Break 
	Endif
	_oJsRet	:= JsonObject():New()
	_cJson 	:= _oJson:toJSON()
	_cJson 	:= EncodeUTF8( _cJson )
	While Valtype(_cRes) = "U"
		_nCont ++
		If !_lJob
			_oSay:SetText("Conectando a API " + _cApi + " - RGLog... " + "Tentativa " + cValToChar(_nCont) + " de " + cValToChar(10)  )
		EndIf
		_cRes 	:= HttpPost( _cUrl, "", _cJson, 60, _aheader, @_cHeaderGet)
		If Valtype(_cRes) = "U"
			Sleep(3000)
		EndIf
		If _nCont == _nTempo  
			Exit
		EndIf 
	EndDo
	if Valtype(_cRes) = "U"
		_cError := "Nao existe retorno do Host, excedido o numero de tentativas de conexÃ£o"
		U_ZRETMsgJson("errointerno",_cError)
		Break
	EndIf
	_oJsRet:FromJSON(_cRes)
	if _oJsRet:hasProperty("status") = .F.
		_cError := "Nao retornou Status de Processamento:" + _cRes
		U_ZRETMsgJson("errointerno",_cError)
		Break
	Endif
	if  _oJsRet["status"] = 100  
		_cError := "Processado com Sucesso "+_cRes
		U_ZRETMsgJson("ok",_cError)
		_lRet := .T.
		Break
	EndIf
	if  _oJsRet["status"] >= 500  .Or. _oJsRet["status"] <= 599
		_cError := "Erro interno do servidor Autoware "+_cRes
		U_ZRETMsgJson("erropad",_cError)
		Break
	EndIf
	if  _oJsRet["status"] >= 600  .Or. _oJsRet["status"] <= 700
		_cError := "Erro Retorno Padrao "+_cRes
		U_ZRETMsgJson("erropad",_cError)
		Break
	EndIf
End Sequence
Conout("ZFATF030 : "+_aMsgRet[1,2])
//SetRestFault(_aMsgRet[1,1],_aMsgRet[1,2])
Return _lRet



//===========================================================================
//Rotinas de Previsão
//===========================================================================

/*/{Protheus.doc} U_ZFTF30E1
Realiza o Empenho  de acordo com a seleção recebida		
@author 	CAOA DAC
@since 		
@version 	undefined
@param 		_cAlias     = Pre selecao realizado baseado no SC6
            _nLimChassi = Qtde de limite, utilizado se possuo 10 mas somente irei realizar empenho de 2 envio na posição _nLimChassi 2
            _lJob       = Indica se esta sendo rodada por job
            _aRetMsg   = Mensagens de erro geradas no processo sera retornado caso informado no parametro @
            _oSay       = Objeto para visualização de processamento
@type 		User function
@ Obs		
@history    
/*/
Function U_ZTF30EMP(_cFilPed, _cPedido, _cItem, _nLimChassi, _nQtdeEmp, _lJob, _oSay )
Local _lLiber                       As Logical
Local _lParcial                     As Logical
Local _lTrans                       As Logical
Local _lCredito                     As Logical
Local _lEstoque                     As Logical
Local _lAvCred                      As Logical
Local _lAvEst                       As Logical
Local _lItLib                       As Logical
Local _lLibPed                      As Logical

Local _cAliasEmp                    As Character
Local _cAliasCH                     As Character
Local _cMens                        As Character
Local _cCC_STATUS                   As Character    
Local _cWhere                       As Character    

Local _nQtdeChassi                  As Numeric
Local _nQtdLib                      As Numeric
Local _nLinhas                      As Numeric
Local _nSaldoSB2					As Numeric
Local _nSaldoSBF					As Numeric

//Local _nPosCpo                      As Numeric

//Local _aPrevisao                    As Array
//Local _aSC5                     	As Array
//Local _aChassi                      As Array

Default _cAlias     := ""                  //  ter um retorno da função GAP167  Previsao de Faturamento
Default _cFilPed    := FwxFilial("SC6")
Default _cPedido    := ""
Default _cItem      := ""
Default _nLimChassi := 0          
Default _nQtdeEmp	:= 0  
Default _lJob       := IsBlind()    
DeFault _aRetMsg    := {}           
//DeFault _oSay  As Object

Begin Sequence
	_lRet		:= .F.
    _cAliasEmp  := GetNextAlias() 
    _cWhere     := ""
    If Empty(_cPedido)
       _cMens := "Falta informação do parametro Pedido para Empenho"
		U_ZRETMsgJson("erropad",_cMens)
		Break 
	Endif  

	_cWhere :=	"	        AND SC6.C6_FILIAL 	= '"+_cFilPed+"' "
    _cWhere +=  "           AND SC6.C6_NUM      = '"+_cPedido+"' "
    If !Empty(_cItem)
        _cWhere := "        AND SC6.C6_ITEM     = '"+_cItem+"' "
    Endif    
    _cWhere +=  "           AND SC6.C6_CHASSI  = ' '" 

	_cWhere := "%"+_cWhere+"%"
	BeginSql Alias _cAliasEmp //Define o nome do alias temporário 
        %NoParser%
		SELECT 	C6_NUM
                , C6_ITEM
                , SC6.C6_CHASSI
                , SC6.R_E_C_N_O_ NREGSC6 
                , SC5.R_E_C_N_O_ NREGSC5
   		FROM  	%Table:SC6% SC6
        JOIN    %Table:SC5% SC5 
                ON  SC5.%notDel%
				AND SC5.C5_FILIAL 	= %xFilial:SC5%  
				AND SC5.C5_NUM 	    = SC6.C6_NUM  
		WHERE  	SC6.%notDel% 
			    %Exp:_cWhere%
		ORDER BY SC6.C6_NUM, SC6.C6_ITEM	
	EndSql
	If (_cAliasEmp)->(Eof()) 
        _cMens := "Nao localizado registros para o Pedido "+_cFilPed+"-"+_cPedido+" para Empenho"
		U_ZRETMsgJson("erropad",_cMens)
		Break 
	Endif  

    _cAliasCH := GetNextAlias()  //Carregar novo select a ser realizado    
    While (_cAliasEmp)->(!Eof()) .and. If(_nLimChassi > 0, _nLinhas <= _nLimChassi,.T.)
        SC6->(DbGoto((_cAliasEmp)->NREGSC6))    
        SC5->(DbGoto((_cAliasEmp)->NREGSC5))    

		//If Ascan(_aSC5, (_cAliasEmp)->NREGSC5)	== 0
		//	Aadd(_aSC5,(_cAliasEmp)->NREGSC5)
		//Endif
        SB1->(DbSetOrder(1))

		//verificar Saldo
		SB2->(DbSetOrder(1))
		SB2->(DbSeek(FWxFilial("SB2")+SC6->C6_PRODUTO+SC6->C6_LOCAL))
		_nSaldoSB2 := SB2->(SaldoSb2())
		If _nSaldoSB2 <= 0
            _cMens := "Item "+SC6->C6_ITEM+" referente ao Pedido "+SC6->C6_NUM+" nao possui saldo disponivel para Empenho"
			ZFT30GRLog(_cMens)
            (_cAliasEmp)->(DbSkip())
            Loop  
		Endif
        If ! _lJob 
            oSay:SetText("Preparando pedido: " + (_cAliasEmp)->C6_NUM+" ...")
   	        ProcessMessage()
        Endif 

        If Select(_cAliasCH) <> 0
	        (_cAliasCH)->(DbCloseArea())
        Endif    
	    _cQuery  := U_XZFT30CH(SC6->C6_PRODUTO      ;
                                , /*_cLocal*/       ;
                                , /*_cNumSerie*/    ;
                                , /*cChassi*/       ;
                                , SC6->C6_XFABMOD   ;   
                                , /*_aCampos*/)     
	    TcQuery _cQuery new alias (_cAliasCH)
	    DbSelectArea(_cAliasCH)
	    If (_cAliasCH)->(Eof())
            _cMens := "Item "+SC6->C6_ITEM+" referente ao Pedido "+SC6->C6_NUM+" nao localizado Chassi disponivel para Empenho"
			U_ZRETMsgJson("erropad",_cMens)

            (_cAliasEmp)->(DbSkip())
            Loop  
		Endif 
	    (_cAliasCH)->(DbGotop())
	    Count To _nQtdeChassi	  //Conta quantos chassis estão disponiveis
	    (_cAliasCH)->(DbGotop())
		//Avaliar se consegue utilizar Chassi  para veiculo
    	While (_cAliasCH)->(!Eof())
        	// Define Variaveis usados pelo MATA440 *
        	_lLiber     := .T.
        	_lParcial   := .T.
        	_lTrans     := .F.
        	_lCredito   := .T.
        	_lEstoque   := .T.
        	_lAvCred    := .T.
        	_lAvEst     := .T.
        	_lItLib     := .T.
        	_lLibPed    := .F.
        	_lGrava     := .T.
        	_cChassi    := (_cAliasCH)->VV1_CHASSI
        	_cLocaliz   := (_cAliasCH)->BF_LOCALIZ
        	_cLocal     := (_cAliasCH)->BF_LOCAL
        	_cNumSeq    := (_cAliasCH)->DB_NUMSEQ
        	_dDataDes   := CtoD((_cAliasCH)->VB0_DATDES)

        	// Posiciona registros para efetuar a liberacao *
        	SB1->(DbSeek(xFilial("SB1")+SC6->C6_PRODUTO))
			//Verificar saldo por endereço
    		SBF->(DbSetOrder(1))
			_nSaldoSBF := 0
    		If SBF->(DbSeek(xFilial("SBF") + _cLocal + _cLocaliz + SC6->C6_PRODUTO + _cChassi))  //SC6->C6_NUMSERI
				_nSaldoSBF := SaldoSBF(		_cLocal				;
											, _cLocaliz			;
											, SC6->C6_PRODUTO	;
											, _cChassi			;
											, /*cLoteCtl*/		;
											, /*cNumLote*/)
     			//_nSaldoSBF := SaldoSBF(.F.,"SBF",.F.,.F.,.F.) 
				If _nSaldoSBF <= 0
            		_cMens := "Item "+SC6->C6_ITEM+" referente ao Pedido "+SC6->C6_NUM+" nao possui saldo disponivel no endereço para o chassi "+_cChassi+" para Empenho"
					U_ZRETMsgJson("erropad",_cMens)
            		(_cAliasEmp)->(DbSkip())
				Endif 
			Endif
        	//Begin Transaction 
            If Empty(SC5->C5_STATUS)
                If ! SC5->(RecLock("SC5",.F.))
                    _cMens := "Pedido "+SC6->C6_NUM+" nao foi possivel acessar tabela (SC5) Pedido para Empenho "
					U_ZRETMsgJson("erropad",_cMens)
                    Break 
                Endif 
                SC5->C5_STATUS := "XX"
                SC5->(MsUnlock())
            EndIf

            If ! SC6->(RecLock("SC6",.F.))
                _cMens := "Item "+SC6->C6_ITEM+" referente ao Pedido "+SC6->C6_NUM+" nao foi possivel acessar tabela de item (SC6) Pedido para Empenho "
				U_ZRETMsgJson("erropad",_cMens)
                Break
                _lGrava := .F.  
            Endif
            If _lGrava
                _nQtdLib  := 1
				SC6->C6_QTDLIB  := _nQtdLib 
                SC6->C6_LOTECTL := CriaVar("C6_LOTECTL")
                SC6->C6_DTVALID := CriaVar("C6_DTVALID")
                SC6->C6_NUMSERI := _cNumSeq		//(_cAliasCH)->DB_NUMSEQ
                SC6->C6_CHASSI  := _cChassi		//(_cAliasCH)->VV1_CHASSI
                SC6->C6_LOCALIZ := _cLocaliz	//(_cAliasCH)->BF_LOCALIZ
				/*
				    SC6->C6_XPRCTAB := (cCabAlias)->VRK_VALTAB	    //Valor de Tabela  
				    SC6->C6_XVLRPRD := (cCabAlias)->VRK_VALPRE  	//Valor Pretendido   
				    SC6->C6_XVLRMVT := (cCabAlias)->VRK_VALMOV  	//VALOR DO MOVIMENTO
				    SC6->C6_XBASST 	:= (cCabAlias)->VRK_XBASST	    //Valor Base ICMS ST	
        		    SC6->C6_XVLRVDA  = (cCabAlias)->VRK_VALVDA  	//VALOR DA VENDA          
				*/
                SC6->(MsUnLock())

                //Efetua a Liberacao por item 
				//EX ABAIXO ESTORNA A LIBERAÇÃO CASO EXISTA 
                //If SC9->(DbSeek(FWxFilial('SC9')+SC6->C6_NUM+SC6->C6_ITEM))
                //    SC9->(a460Estorna(.T.))
                //Endif    
                _nQtdLib   := SC6->C6_QTDLIB
                _nQtdLib   := SC6->( MaLibDoFat(SC6->(RecNo())  ;
                                        , _nQtdLib      ;
                                        , @_lCredito    ;    
                                        , @_lEstoque    ;
                                        , _lAvCred      ;
                                        , _lAvEst       ;
                                        , _lLiber       ;
                                        , _lTrans) )
				If !_lCredito
               	 	_cMens := "Item "+SC6->C6_ITEM+" referente ao Pedido "+SC6->C6_NUM+" nao localizado bloqueado limite de Credito Pedido para Empenho "
					U_ZRETMsgJson("erropad",_cMens)
                	//(_cAliasCH)->(DbSkip())
                	_lGrava := .F.   
				Endif 	
				If !_lEstoque
                	_cMens := "Item "+SC6->C6_ITEM+" referente ao Pedido "+SC6->C6_NUM+" nao localizado bloqueado nao existe estoque Pedido para Empenho "
					U_ZRETMsgJson("erropad",_cMens)
                	//(_cAliasCH)->(DbSkip())
                	_lGrava := .F.   
				Endif 	
			Endif 
			If _lGrava
                SDC->(DbSetOrder(1))
                SDC->(DbGoTop())
                //BF LOCALIZADA NA QUERY CHASSI DISPONIVES
                If !SDC->(DbSeek(xFilial("SDC")+SC6->C6_PRODUTO         ;
                                              +SC6->C6_LOCAL            ;
                                              +"SC6"                    ;
                                              +SC6->C6_NUM              ;
                                              +SC6->C6_ITEM             ;
                                              +SC9->C9_SEQUEN           ;
                                              +CriaVar("DC_LOTECTL")    ;
                                              +CriaVar("DC_NUMLOTE")    ;
                                              +_cLocaliz  ;
                                              +_cChassi ))
                    _cMens := "Item "+SC6->C6_ITEM+" referente ao Pedido "+SC6->C6_NUM+" nao localizado Saldo Chassi Pedido para Empenho "
					U_ZRETMsgJson("erropad",_cMens)
                    (_cAliasCH)->(DbSkip())
                    _lGrava := .F.   
                Endif    
            Endif
            If _lGrava 
                //Tabela SCC nao é gerada
                If Empty(Alltrim(SC9->C9_BLCRED)) .And. Empty(Alltrim(SC9->C9_BLEST )) .And. Empty(Alltrim(SC9->C9_BLWMS ))
                    cCC_STATUS  := "1"
                ElseIf SC9->C9_BLCRED == "01" ; _cCC_STATUS  := "2"
                ElseIf SC9->C9_BLCRED == "04" ; _cCC_STATUS  := "3"
                ElseIf SC9->C9_BLCRED == "05" ; _cCC_STATUS  := "4"
                ElseIf SC9->C9_BLCRED == "06" ; _cCC_STATUS  := "5"
                ElseIf SC9->C9_BLCRED == "09" ; _cCC_STATUS  := "6"
                ElseIf SC9->C9_BLEST  == "02" ; _cCC_STATUS  := "7"
                ElseIf SC9->C9_BLEST  == "03" ; _cCC_STATUS  := "8"
                ElseIf SC9->C9_BLWMS  == "01" ; _cCC_STATUS  := "9"
                ElseIf SC9->C9_BLWMS  == "02" ; _cCC_STATUS  := "A"
                ElseIf SC9->C9_BLWMS  == "03" ; _cCC_STATUS  := "B"
                ElseIf SC9->C9_BLWMS  == "05" ; _cCC_STATUS  := "C"
                ElseIf SC9->C9_BLWMS  == "06" ; _cCC_STATUS  := "D"
                ElseIf SC9->C9_BLWMS  == "07" ; _cCC_STATUS  := "E"
                EndIf

                If _cCC_STATUS <> "1"
                    _cMens := "Item "+SC6->C6_ITEM+" referente ao Pedido "+SC6->C6_NUM+" nao liberado na liberação Pedido para Empenho "
					U_ZRETMsgJson("erropad",_cMens)
                    (_cAliasCH)->(DbSkip())
                    _lGrava := .F.   
                Endif                                                
            Endif
            If _lGrava  
                If !SC9->(RecLock("SC9",.F.))
                    _cMens := "Item "+SC6->C6_ITEM+" referente ao Pedido "+SC6->C6_NUM+" nao foi possivel acessar tabela de liberação (SC9) Pedido para Empenho "
					U_ZRETMsgJson("erropad",_cMens)
                    (_cAliasCH)->(DbSkip())
                    _lGrava := .F.    
                Endif
            Endif 
            If _lGrava      
                SC9->C9_XCODMAR := SC6->C6_XCODMAR 
                SC9->C9_XMODVEI := SC6->C6_XMODVEI
                SC9->C9_XSEGMOD := SC6->C6_XSEGMOD
                SC9->C9_XFABMOD := SC6->C6_XFABMOD
                SC9->C9_XCORINT := SC6->C6_XCORINT
                SC9->C9_XCOREXT := SC6->C6_XCOREXT
                SC9->C9_XGRPMOD := ""
                If Empty(SC9->C9_SEQUEN)
                    SC9->C9_SEQUEN  := SDC->DC_SEQ
                EndIf
                SC9->(MsUnLock())
                //DBCommitAll()
                //Aadd(_aPrevisao, SC6->(Recno()))
                //Adel(_aEmpenho[_nPosCpo,4],1)             //apago o chassi utilizado
                //aSize(_aEmpenho, Len(_aEmpenho[_nPosCpo,4])-1)      //Ajustando empenhos
            Endif
			If _lGrava
				_nQtdeEmp ++  //indica quantidade empenhada
				Exit   //Caso chegou aqui conseguiu fazer o empenho    
			Endif
		EndDo	
        //End Transaction    
        _nLinhas ++      //	//Atualização realizada pela Totvs, acrescentada na lógica DAC 14/05/2024
        (_cAliasEmp)->(DbSkip())
    EndDo
End Sequence 
Return Nil


Static Function ZFT30GRLog(_aRegSc6)
Local _nPos 	As Numeric
Local _cMens 	As Character

Default _aRegSc6 := {}

If FieldPos("C6_XOBSPR") == 0 
	Return Nil
Endif 

For _nPos := 1 To Len(_aRegSc6)
	//Caso esteja informado o numero do registro
	If Len(_aRegSc6[_nPo]) > 1 .And. _aRegSc6[_nPos,2] > 0
		SC6->(DbGoto(_aRegSc6[_nPos,2]))
	Endif  
    If ! SC6->(RecLock("SC6",.F.))
        _cMens := "Item "+SC6->C6_ITEM+" referente ao Pedido "+SC6->C6_NUM+" nao foi possivel acessar tabela de item (SC6) Pedido para Empenho "
		U_ZRETMsgJson("erropad", _cMens)
        Break
        _lGrava := .F.  
    Endif

Next 

Return Nil

/*/{Protheus.doc} U_ZFTF30EP
Realiza o Empenho 		
@author 	CAOA DAC
@since 		
@version 	undefined
@param 		_nOpcEmp = 1 Criar Empenho
            _nOpcEmp = 2 Retirar Empenho
@type 		Static function
@ Obs		
@history    
/*/
Function U_ZFTF30EP( _oSay, _nOpcEmp, _cFilPrev, _cCodPrev, _nRegZZP, _nQtde, _lJob, _aRetMsg )
Local _cAliasEmp	:= GetNextAlias()   AS Character
Local _lRet 		:= .T.              AS Logical
Local _cCampos		:= ""               AS Character
Local _cWhere		:= ""               AS Character
Local _cJoinSC6     := "                AS Character
Local _aPrevisao 	:= {}               AS Array
Local _nRow			:= 0                AS Numeric

Default _nOpcEmp	:= 0                
Default	_cFilPrev   := FwxFilial("ZZP") 
Default _cCodPrev   := ""
Default _nRegZZP 	:= 0
Default _nQtde		:= 0
Default _lJob 		:= IsBlind() 
Default _aRetMsg   := {}

Begin Sequence
	//nao pode vir em branco
	iF Empty(_cCodPrev)
		If _lJob
	    	ApMsgStop("Codigo previsao em branco, verificar com ADM Sistemas", "Previsão Faturamento")
		Endif	
		_lRet	:=  .F.
		Break 
	Endif

	_cWhere := " "
	If _nRegZZP > 0
		_cWhere	+= CRLF + " AND ZZP.R_E_C_N_O_ = "+AllTrim(Str(_nRegZZP))
	Else
		_cWhere 	+= CRLF +"		AND ZZP.ZZP_FILIAL = '"+_cFilPrev+"' "
    	_cWhere 	+= CRLF + "     AND ZZP.ZZP_CODPRV = '"+_cCodPrev+"' " 
	Endif 
	If _nQtde > 0
		_nRow		:= _nQtde + 1
		_cWhere	    += CRLF + " AND ROWNUM 	<  "+AllTrim(Str(_nRow))
	Endif 
	If !Empty(_cWhere)
		_cWhere	+= CRLF
	Endif
	_cWhere := "%"+_cWhere+"%"

	//incluir empenho 
	_cJoinSC6 := ""
	If _nOpcEmp == 1  
		_cJoinSC6	+= CRLF + " AND SC6.C6_CHASSI = ' '  "
	//Retirar empenho 
	ElseIf  _nOpcEmp == 2
		_cJoinSC6	+= CRLF + " AND SC6.C6_CHASSI  <> ' '  "
	Endif 
	//Qtde de colunas, quando informado este campo será validado até a quantidade enviada
	//Acrescentar  + 1 no select nao valida = somente > ou <

	If !Empty(_cJoinSC6)
		_cJoinSC6	+= CRLF
	Endif
	_cJoinSC6 := "%"+_cJoinSC6+"%"

	BeginSql Alias _cAliasEmp //Define o nome do alias temporário 
        %NoParser%
		WITH PEDIDOS_FAT AS (
								SELECT 	C6_NUM
                                        , C6_ITEM
                                        , SC6.C6_CHASSI
                                        , SC6.R_E_C_N_O_ NREGSC6 
                                        , SC5.R_E_C_N_O_ NREGSC5
								FROM  	%Table:ZZP% ZZP 
   								JOIN 	%Table:SC6% SC6
									ON  SC6.%notDel% 
									AND SC6.C6_FILIAL 	= %xFilial:SC6%  
									AND SC6.C6_XFILPVR 	= ZZP.ZZP_FILIAL  
									AND SC6.C6_XCODPVR 	= ZZP.ZZP_CODPRV
 									AND SC6.C6_CLI  	= ZZP.ZZP_CODCLI 
									AND SC6.C6_LOJA  	= ZZP.ZZP_LOJCLI 
 									AND SC6.C6_PRODUTO  = ZZP.ZZP_CODPRD 
									AND SC6.C6_XFABMOD	= ZZP.ZZP_FABMOD
									AND SC6.C6_NOTA 	= ' '   
 									%Exp:_cJoinSC6%
                                JOIN    %Table:SC5% SC5 
                                    ON  SC5.%notDel%
									AND SC5.C5_FILIAL 	= %xFilial:SC5%  
									AND SC5.C5_NUM 	    = SC6.C6_NUM  
								WHERE  	ZZP.%notDel% 
										%Exp:_cWhere%
								) 
		SELECT  PEDIDOS_FAT.* 
				%Exp:_cCampos% 
		FROM PEDIDOS_FAT		
		ORDER BY C6_NUM, C6_ITEM	
	EndSql
	iF (_cAliasEmp)->(Eof()) 
		If _lJob
	    	ApMsgStop("nao localizado registros para serem empenhados nos pedidos", "Previsão Faturamento")
		Endif	
		_lRet	:=  .F.
		Break 
	Endif  
	If _nOpcEmp == 1
		_aPrevisao := U_ZFTF30E1(_oSay, _cAliasEmp, /*_nLimChassi*/, _lJob, _aRetMsg )
		If Len(_aPrevisao) == 0 
			_cMens := "nao foi possivel realizar empenho XZFT19EP, verificar com ADM Sistemas"
			Aadd(_aRetMsg, _cMens)
			If _lJob
	    		ApMsgStop(_cMens, "Previsao Faturamento")
			Endif
			_lRet := .F. 
			Break
		Endif  
	ElseIf _nOpcEmp == 2
		U_XZFT19ET(_cAliasEmp)   //localizado em ZFATF019
	Endif
End Sequence
If Select(_cAliasEmp) <> 0
	(_cAliasEmp)->(DbCloseArea())
	Ferase(_cAliasEmp+GetDBExtension())
Endif

Return _lRet 


/*/{Protheus.doc} U_XZFT30CH
Verificar saldo de chassi disponivel 		
@author 	CAOA DAC
@since 		
@version 	undefined
@param 		
@type 		Static function
@ Obs		
@history    
/*/
Function U_XZFT30CH(_cProduto, _cLocal, _cNumSerie, _cChassi, _cFabMod, _aCampos)
Local _cQuery 		AS Character
Local _nPos 		AS Numeric

Default _cProduto	:= ""
Default _cLocal 	:= "VN "
Default _cNumSerie	:= ""
Default _cChassi	:= ""
Default _cFabMod    := ""
Default _aCampos    := { 	"VV1.VV1_FILIAL",;
							"SBF.BF_PRODUTO",;
							"VV1.VV1_CHASSI",;
							"VV1.VV1_CODMAR",;
							"VV1.VV1_MODVEI",;
							"VV1.VV1_SEGMOD",;
							"VV1.VV1_FABMOD",;
							"VV1.VV1_CORVEI",;
							"SBF.BF_LOCAL"	,;
							"SBF.BF_LOCALIZ",;
							"SBF.BF_QUANT"	;
						}
    _cQuery := ""
    _cQuery += CRLF + " SELECT A.* "
    _cQuery += CRLF + "  FROM (  "
    _cQuery += CRLF + "      SELECT "

    For _nPos := 1 To Len(_aCampos)
        _cQuery += CRLF + If(_nPos > 1,"    , ","     ")+_aCampos[_nPos]
    Next

	_cQuery += CRLF + "     , SUM(SBF.BF_QUANT) OVER (ORDER BY BF_PRODUTO) AS QTDETOT " 	

    _cQuery += CRLF + "     , (SELECT MAX(SDB.DB_NUMSEQ) "
    _cQuery += CRLF + "          FROM " + RetSqlName("SDB") + " SDB"
    _cQuery += CRLF + "          WHERE  SDB.DB_FILIAL       = '"+xFilial("SDB")+"'"
    _cQuery += CRLF + "             AND SDB.DB_ESTORNO      = ' '"
    _cQuery += CRLF + "             AND SDB.DB_ATUEST       = 'S'"
    _cQuery += CRLF + "             AND SDB.DB_LOCAL        = SBF.BF_LOCAL"
    _cQuery += CRLF + "             AND SDB.DB_LOCALIZ      = SBF.BF_LOCALIZ"
    _cQuery += CRLF + "             AND SDB.DB_NUMSERI      = SBF.BF_NUMSERI"
    _cQuery += CRLF + "             AND SDB.DB_PRODUTO      = SBF.BF_PRODUTO"
    _cQuery += CRLF + "             AND SDB.D_E_L_E_T_      = ' ') DB_NUMSEQ,"
    _cQuery += CRLF + "             NVL((SELECT VB0_DATDES FROM " + RetSqlName("VB0") + "  VB0 "
    _cQuery += CRLF + "                  WHERE VB0.VB0_DATBLO||VB0.VB0_HORBLO =( "
    _cQuery += CRLF + "                                                     SELECT max(VB0A.VB0_DATBLO||VB0A.VB0_HORBLO) as DATBLOQ "
    _cQuery += CRLF + "                                                     FROM " + RetSqlName("VB0") + "  VB0A "
    _cQuery += CRLF + "                                                        WHERE VB0A.VB0_FILIAL = VB0.VB0_FILIAL "
    _cQuery += CRLF + "                                                          AND VB0A.vb0_chaint = VB0.VB0_CHAINT "
    _cQuery += CRLF + "                                                          AND VB0A.D_E_L_E_T_ = ' ') "
    _cQuery += CRLF + "                 AND VB0.VB0_FILIAL = '" + xFilial("VB0") + "' "
    _cQuery += CRLF + "                 AND VB0.VB0_CHAINT = VV1.VV1_CHAINT "
    _cQuery += CRLF + "                 AND VB0.D_E_L_E_T_ = ' '),'99999999') AS VB0_DATDES "
    _cQuery += CRLF + "     , NVL(SC6.C6_CHASSI,'OK' ) AS CHASSI
//    _cQuery += CRLF + "     , NVL(VV1.VV1_CHASSI,'OK' ) AS CHASSI
    _cQuery += CRLF + " FROM " + RetSqlName("VV1") + " VV1 "
    _cQuery += CRLF + "      INNER JOIN " + RetSqlName("SBF") + " SBF "
    _cQuery += CRLF + "          ON  SBF.BF_FILIAL  = '" + xFilial("SBF") + "'"
    _cQuery += CRLF + "          AND SBF.BF_NUMSERI = VV1.VV1_CHASSI "
    _cQuery += CRLF + "          AND SBF.D_E_L_E_T_ = VV1.D_E_L_E_T_ "
    _cQuery += CRLF + "          AND SBF.BF_QUANT   > 0 "
    _cQuery += CRLF + "          AND SBF.BF_EMPENHO = 0 "
    //_cQuery += CRLF + "          AND SBF.BF_PRODUTO = '" + (cCabAlias)->C6_PRODUTO + "' "
    //_cQuery += CRLF + "          AND SBF.BF_LOCAL   = '" + (cCabAlias)->C6_LOCAL   + "' "
	If !Empty(_cProduto)
		_cQuery += CRLF + "		    AND SBF.BF_PRODUTO = '" +_cProduto+"' "	
	Endif	
	If !Empty(_cLocal)
    	_cQuery += CRLF + "         AND SBF.BF_LOCAL   = '" +_cLocal+ "' "					
    Endif	
    If !Empty(Alltrim(_cNumSerie))
        _cQuery += CRLF + "         AND SBF.BF_NUMSERI      = '" + _cNumSerie + "' "
    EndIf
	_cQuery += CRLF + "      LEFT JOIN " + RetSqlName("SC6") + " SC6 "
    _cQuery += CRLF + "          ON  SC6.C6_FILIAL   = '" + xFilial("SC6") + "' "
    _cQuery += CRLF + "          AND SC6.C6_CHASSI  = VV1.VV1_CHASSI "
    _cQuery += CRLF + "          AND SC6.D_E_L_E_T_ = ' ' "
 
    _cQuery += CRLF + "      WHERE   VV1.VV1_FILIAL      = '" + xFilial("VV1") + "' "
    //_cQuery += CRLF + "          AND VV1.VV1_CHASSI      = '" +cChassi+ "' "
    _cQuery += CRLF + "          AND VV1.VV1_SITVEI      = '0' "
    _cQuery += CRLF + "          AND VV1.VV1_IMOBI       = '0' "
    _cQuery += CRLF + "          AND VV1.VV1_FABMOD      = '" + _cFabMod + "' "
    _cQuery += CRLF + "          AND VV1.D_E_L_E_T_      = ' ') A "
    _cQuery += CRLF + " WHERE A.VB0_DATDES > '        ' "
    _cQuery += CRLF + "   AND A.CHASSI     = 'OK' " 
    _cQuery += CRLF + " ORDER BY A.VV1_FILIAL,A.BF_PRODUTO,A.DB_NUMSEQ,A.VV1_CHASSI "
Return _cQuery



/*/{Protheus.doc} ZRESTPRVMsg
Carrega Numero do Erro para retorno
@author 	DAC
@since 		
@version 	undefined
@param 
@type 		function
/*/
Static Function ZRESTPRVMsg()
Local _aRet AS Array
Begin Sequence
	_aRet := {}
	//			Nr Ret	Tags Json			Item	Obrig	Descrição	
	Aadd(_aRet, {100,	"ok"				, .F.	, .F., 	"Item Pedido recebido com sucesso"})
	Aadd(_aRet, {150,	"okfat"			    , .T.	, .F., 	"Faturamento do item realizado com sucesso"})

	Aadd(_aRet, {300,	"empresa"			, .F.	, .F., 	"Empresa nao informada"})
	Aadd(_aRet, {301,	"filial"			, .F.	, .F., 	"Filial nao informada"})
	Aadd(_aRet, {302,	"token"				, .F.	, .F., 	"Token Invalido"})
	Aadd(_aRet, {303,	"ambiente"			, .F.	, .F., 	"Nao foi possivel acessar ambiente"})
	Aadd(_aRet, {304,	"responsavel"		, .F.	, .F., 	"nao Autorizado"})

	Aadd(_aRet, {400,	"cnpjcpf"			, .F.	, .T., 	"Problemas encontrados referente ao CNPJ e ou CPF do Cliente"})
	Aadd(_aRet, {401,	"pedidovei"			, .F.	, .T., 	"Problemas encontrados no numero de Pedido"})
	Aadd(_aRet, {402,	"tpoperacao"		, .F.	, .T., 	"Problemas encontrados no tipo de operação"})
	Aadd(_aRet, {403,	"dataemissao"		, .F.	, .T., 	"Problemas encontrados com data de emissao"})
	Aadd(_aRet, {404,	"cdcondpgto"		, .F.	, .T., 	"Problemas encontrados na condição Pgto"})
	Aadd(_aRet, {405,	"cdnatureza"		, .F.	, .T., 	"Problemas encontrados com Natureza"})
	Aadd(_aRet, {406,	"tpvenda"			, .F.	, .T., 	"Problemas encontrados com Tipo de Venda"})
	Aadd(_aRet, {407,	"tpfrete"			, .F.	, .F., 	"Problemas encontrados no tipo de Frete"})
	Aadd(_aRet, {408,	"cdtransporte"		, .F.	, .F., 	"Problemas encontrados com a Transportadora"})

	Aadd(_aRet, {450,	"nritem"			, .T.	, .T., 	"Problemas com numeração sequencial do item"})
	Aadd(_aRet, {451,	"cdmarca"			, .T.	, .T., 	"Problemas com a Marca Veiculo"})
	Aadd(_aRet, {452,	"cdgrupomod"		, .T.	, .T., 	"Problemas com Grupo Modelo Veículo "})
	Aadd(_aRet, {453,	"cdmodvei"			, .T.	, .T., 	"Problemas com Modelo Veículo"})
	Aadd(_aRet, {454,	"cdsegmod"			, .T.	, .T., 	"Problemas com Segmento Modelo do Veículo"})
	Aadd(_aRet, {455,	"anomodelo"			, .T.	, .T., 	"Problemas com Ano Modelo do Veículo"})
	Aadd(_aRet, {456,	"anofabricacao"		, .T.	, .T., 	"Problemas com o Ano de Fabricação do Veículo"})
	Aadd(_aRet, {457,	"cdcorexterna"		, .T.	, .T., 	"Problemas com ao Cor Externa Veiculo"})
	Aadd(_aRet, {458,	"cdcorinterna"		, .T.	, .T., 	"Problemas com ao Cor Interna Veiculo"})
	Aadd(_aRet, {459,	"cdopcional"		, .T.	, .F., 	"Problemas com Opcional Veículo"})
	Aadd(_aRet, {460,	"produto"			, .T.	, .F., 	"Problemas com Produto"})
	Aadd(_aRet, {461,	"qtdeitem"			, .T.	, .T., 	"Problemas com quantidade de item"})
	Aadd(_aRet, {462,	"valorunitario"		, .T.	, .F., 	"Problemas com valor unitario"})
	Aadd(_aRet, {463,	"cdoperacao"		, .T.	, .F., 	"Problemas com codigo operacao no item"})
	Aadd(_aRet, {464,	"iditem"			, .T.	, .T., 	"ID item"})
	Aadd(_aRet, {465,	"chassi"			, .T.	, .F., 	"Problemas com Chassi"})
	Aadd(_aRet, {466,	"Fatura"			, .T.	, .F., 	"Problemas com Faturamento"})

	Aadd(_aRet, {500,	"conexao"			, .F.	, .T., 	"Problemas relativo a conexão"})

	Aadd(_aRet, {600,	"erropad"			, .F.	, .T., 	"Problemas com erros no Padrão"})
End Sequence
Return _aRet

/*
{ "pedidovei":"021ABC000",
  "cnpjcpf" :"10213051001399",
 	"previsaonr":"00000001",
  "Itens":
 				[
        	{ "iditem":"XXX01",
						"status":"465", 
						"ocorrencia":"Nao existem chassis disponivel para veiculo",
						"qtderecebida":3,
						"qtdeocorrencia":1,
						"qtdefaturada":0,
  					"notafiscalnr":"",
  					"notafiscalserie":"",
  					"notafiscalemissao":"",
  					"notafiscalxml":""
					},
        	{ "iditem":"XXX01",
						"status":"150", 
						"ocorrencia":"Faturamento do item realizado com sucesso",
						"qtderecebida":3,
						"qtdeocorrencia":0,
						"qtdefaturada":1,
  					"notafiscalnr":"000000089",
  					"notafiscalserie":"7  ",
  					"notafiscalemissao":"20240920",
  					"notafiscalxml":"formato xml "
						},
        	{ "iditem":"XXX01",
						"status":"150", 
						"ocorrencia":"Faturamento do item realizado com sucesso",
						"qtderecebida":3,
						"qtdeocorrencia":0,
						"qtdefaturada":1,
  					"notafiscalnr":"000000090",
  					"notafiscalserie":"7  ",
  					"notafiscalemissao":"20240920",
  					"notafiscalxml":"formato xml "
						},
						{ "iditem":"XXX02",
							"status":"100", 
							"ocorrencia":"Faturamento do item realizado com sucesso",
						  "qtderecebida":1,
							"qtdeocorrencia":0,
						 	"qtdefaturada":1,
  						"notafiscalnr":"000000091",
  						"notafiscalserie":"7  ",
  						"notafiscalemissao":"20240920",
  						"notafiscalxml":"formato xm "
						}
				]
}*/



//////////////////////////////////////////////////
/*
=====================================================================================
Programa.:              ZRESTPRVMonitor
@param 					_cStatus   	= Status que será gerado no SZ1 1-OK 2-Divergência 
						_cTab		= Tabela principal que esta sendo gravada na integração
						_cDoc   	= Numero do Documento a ser gravado, ja contém a série 
						_cErro    	= mensagem a ser gravada podendo ser de erro e ou exito 
						_dDataIni	= data inicial da importação 
						_cHsIni 	= hora inicial da importação 
						_cJson    	= Json para importação
						_nErro		= numero de retorno que ocasionou erro e ou exito
Autor....:              CAOA - DAC Denilso 
Data		            14/11/2022
Descricao / Objetivo	Funcionalidade que efetuara a gravação de dados no monitor 
Doc. Origem            	PEC020 - Monitor de Integrações WIS
Solicitante            	CAOA
Uso              		ZWSR012
Obs
@menu       			Nao Informado
@return					_lRet 		- Verdadeiro ou falso
@history 				DAC - 	15/02/2023 
								Implementação de envio de campos a serem gravados para SZ1	
=====================================================================================
*/
Static Function	ZRESTPRVMonitor(_cStatus, _cTab, _cDoc, _cMens, _cErro, _dDataIni, _cHsIni, _nErro, _nReg )	
Local _cUserName AS Character   
Local _aCampos	 AS Array

Default _cTab 		:= "SC5"
Default _dDataIni	:= Date()
Default _cHsIni		:= Time()

	_cUserName := "REST PEDIDO"   
	_aCampos	 := {}  //Adicionar campos a serem gravador na tabela DAC  15/02/2023 
	//AAdd(_aCampos,{"Z1_NTPINTG"	, "ZRESTSA1" 	})
	U_CAOAGRVM(XFilial(_cTab),;		//Filail
				_cStatus,;				//Status
				"200",;					//Código do Processo  REST IMPORTACAO CLIENTES                          
				/*cCodtpint*/,;			//Código do tipo
				Upper(_cErro),;			//Mensagem de retorno
				_cDoc,;					//Documento
				_dDataIni,;				//Data Inicio
				_cHsIni,;				//Hora Final
				Upper(_cMens),;			//Json
				If(_cStatus=="1", (_cTab)->(Recno()),0),; //Numero do Registro
				_cUserName,;			//Nome do Usuário na inclusão
				_nErro,;				//Retorno código
				_aCampos)				//Campos pré definidos para gravar no SZ1 
Return Nil



/*
Grava alterações dos campos para levar até a tabela SZ1 quando for alteração 
Static Function ZRESTPRVAlterados( _cTab, _cCampo, _xConteudo, _aAuto, _aAlterado, _lNovo )
Local _lRet 		AS Logical
Local _cConteudo	//AS Character
//Local _nTam 	:= _oSA1Mod:adatamodel[1]  //_oSA1Mod:GetFields()
Begin Sequence 
	_lRet 		:= .T.
	_cConteudo	:= ""
    //Registro novo nao guardar alterações
	Aadd( _aAuto, { _cCampo    , _xConteudo , Nil } )
	If _lNovo
		Break 
	Endif
	//verifica se existe campo
	If (_cTab)->(FieldPos(_cCampo)) == 0
		U_ZRETMsgJson("erropad","Campo "+_cCampo+" nao localizado na validacao alterados !")
		_lRet := .F. 
		Break
	Endif 
	_cConteudo := (_cTab)->(FieldGet(FieldPos(_cCampo)))
	If ValType(_xConteudo) == "N"
		_xConteudo := AllTrim(Str(_xConteudo))
		_cConteudo := AllTrim(Str(_cConteudo))
	ElseIf ValType(_xConteudo) == "D"
		_xConteudo := AllTrim(DtoC(_xConteudo))
		_cConteudo := AllTrim(DtoC(_cConteudo))
	ElseIf ValType(_xConteudo) == "L"
		If _xConteudo
			_xConteudo := "VERDADEIRO"
		Else	
			_xConteudo := "VERDADEIRO"
		Endif 
		If _cConteudo
			_cConteudo := "VERDADEIRO"
		Else	
			_xConteudo := "FALSO"
		Endif 
	Else 
		_xConteudo := AllTrim(_xConteudo)
		_cConteudo := AllTrim(_cConteudo)
	Endif 	 
	If _xConteudo <> _cConteudo
		Aadd(_aAlterado,"REGISTRO "+_cCampo+" ALTERADO ANTES : "+_cConteudo+" ALTERADO PARA : "+_xConteudo) 
	Endif 
End Sequence
Return _lRet

*/



Static Function M2LibDoFat( nRegSC6   , nQtdaLib  , lCredito  , lEstoque  , ;
					 lAvCred   , lAvEst    , lLibPar   , lTrfLocal , ;
					 aEmpenho  , bBlock    , aEmpPronto, lTrocaLot , ;
					 lGeraDCF  , nVlrCred  , nQtdalib2 , lLogMsg   , ;
					 lOrdSepLib)

Local aArea    	    := GetArea("SC6")
Local aAreaSA1 	    := SA1->(GetArea())
Local aAreaSF4 	    := SF4->(GetArea())
Local aAreaSC5 	    := {}
Local aAreaSC6 	    := {}
Local nQtdLib  	    := nQtdALib
Local nQtdLib2 	    := nQtdALib2
Local lContinua	    := .T.
Local lLibItPrev    := SuperGetMV( 'MV_FATLBPR', .F., .T. )	//Indica se permite a libera?o de Itens previstos do Pedido de Venda

//????????????????????????????????
//?Integracao SIGAFAT e SIGADPR                                 ?
//????????????????????????????????
Local lIFatDpr	 := SuperGetMV("MV_IFATDPR",.F.,.F.)

nQtdLib := nQtdALib
//?????????????????????????????????????
//?eta os parametros defaults                                             ?
//?????????????????????????????????????
DEFAULT nQtdALib   := SC6->C6_QTDLIB
DEFAULT nQtdALib2  := SC6->C6_QTDLIB2
DEFAULT lCredito   := .T.
DEFAULT lEstoque   := .T.
DEFAULT lAvCred    := .T.
DEFAULT lAvEst     := .T.
DEFAULT lGeraDCF   := .T.
DEFAULT lLogMsg    := .F.
DEFAULT lOrdSepLib := .F.
//?????????????????????????????????????
//?osiciona Pedido                                                        ?
//?????????????????????????????????????
If Empty(SC6->C6_BLOQUEI) .And. AllTrim(SC6->C6_BLQ)<>"R" .And. !(lOrdSepLib)

	dbSelectArea("SC6")
	If nRegSC6<>0
		aAreaSC6 := GetArea()
		MsGoto(nRegSC6)
	Else
		aAreaSC6 := GetArea("SC6")
	EndIf

	If SB1->B1_FILIAL+SB1->B1_COD <> xFilial('SB1')+SC6->C6_PRODUTO
		SB1->(DbSetOrder(1))
		SB1->(MsSeek(xFilial('SB1')+SC6->C6_PRODUTO))
	Endif
	dbSelectArea("SC5")
	dbSetOrder(1)
	If ( xFilial("SC5")==SC5->C5_FILIAL .And. SC5->C5_NUM==SC6->C6_NUM )
		aAreaSC5 := GetArea("SC5")
	Else
		MsSeek(xFilial("SC5")+SC6->C6_NUM)
		aAreaSC5 := GetArea()
	EndIf
	//?????????????????????????????????????
	//?ntegracao com EEC													   ?
	//?uncao: AvChkStDesp()												   ?
	//?arametros: Nro do pedido de venda. 									   ?
	//?etorno: True  - O pedido de venda podera ser liberado visto que as 	   ?
	//?				despesas ja foram integradas.						   ?
	//?        False - O pedido de venda n? poder?ser liberado visto que    ?
	//?				existem pendencias para as despesas.				   ?
	//?????????????????????????????????????
	If !Empty(SC5->C5_PEDEXP)
		If FindFunction("AvChkStDesp")
			If !AvChkStDesp(SC5->C5_NUM)
				lContinua := .F.
			EndIf
		EndIf
	EndIf

	//------------------------------------------------------------------------------
	// Verifica o tipo de opera?o (C6_TPOP) antes de liberar. Itens previstos n?
	// podem ser liberados a menos que o par?etro MV_FATLBPR esteja como .T.
	// Altera?o realizada para atender o requisito de Programa?o de Entrega.
	//------------------------------------------------------------------------------
	If ( SC6->C6_TPOP == "P" ) .And. ( !lLibItPrev )
		lContinua := .F.
	EndIf

	//????????????????????????????????????
	//?M_SER004_CRM019_Integra?o_Faturamento_DPR                           ?
	//?Se o item eh do tipo "Desenvolvimento" nao libera para faturamento   ?
	//?Autor: Thiago Tavares													   ?
	//?Data: 25/10/2013															   ?
	//????????????????????????????????????
	If lIFatDpr
		If SC6->C6_TPPROD == "2"
			lContinua := .F.
		EndIf
	EndIf

	If lContinua
		If nRegSC6 == 0 .Or. ( RecLock("SC5") .And. RecLock("SC6") )
			If Empty(SC5->C5_BLQ)
				If nQtdALib2 == 0 .And. SC6->C6_UNSVEN <> 0
					nQtdALib2 := SB1->(ConvUm(SC6->C6_PRODUTO,nQtdALib,Nil,2))
					If nQtdALib2 == 0
						If SC6->C6_QTDVEN-SC6->C6_QTDEMP-SC6->C6_QTDENT-nQtdALib==0
							nQtdALib2 := SC6->C6_UNSVEN-SC6->C6_QTDEMP2-SC6->C6_QTDENT2
						Else
							nQtdALib2 := nQtdALib*SC6->C6_UNSVEN/SC6->C6_QTDVEN
						EndIf
					EndIf
					SC6->C6_QTDLIB2:= nQtdALib2
					nQtdALib2 := SC6->C6_QTDLIB2
				EndIf
				SC6->C6_QTDLIB := nQtdALib
				SC6->C6_QTDLIB2:= nQtdALib2
				FatAtuEmpN("-")
				nQtdLib := a440GeraC9(@nQtdLib,@lCredito,@lEstoque,lAvCred,lAvEst,lLibPar,lTrfLocal,@aEmpenho,bBlock,aEmpPronto,lTrocaLot,lGeraDCF,@nVlrCred,@nQtdlib2)
				FatAtuEmpN("+")
			EndIf
		EndIf
	Else
		nQtdLib := 0
	EndIf
	RestArea(aAreaSC5)
	RestArea(aAreaSC6)

Else
	nQtdLib := 0
Endif

//?????????????????????????????????????
//?estaura a Entrada                                                      ?
//?????????????????????????????????????
RestArea(aAreaSA1)
RestArea(aAreaSF4)
RestArea(aArea)
Return(nQtdLib)




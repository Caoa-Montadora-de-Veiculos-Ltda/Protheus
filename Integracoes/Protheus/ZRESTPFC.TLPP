#INCLUDE "TOTVS.CH"
#INCLUDE "PROTHEUS.CH"
#INCLUDE "FWMVCDEF.CH"
#INCLUDE "RESTFUL.CH"

/*/{Protheus.doc} ZRESTPFC
Serviço de integração Consulta Faturamento Pedido 
@author 	DAC 
@since 		26/09/2024
@version 	undefined
@param		nao utilizado
@type 		User Function
@client   	CAOA BARUERI
@return   	_aMsg - Array com retorno Json código e ocorrencia
@project 	GAP228 -Integração Faturamento Autoware
			https://tdn.totvs.com/display/tec/DecodeUTF8
			https://jsonformatter.curiousconcept.com/  VERIFICAR SE JSON ESTA CORRETO
			https://jsonlint.com/?code=   //VALIDAR JSON
            https://jsoneditoronline.org/#left=local.sowavu  //estrutura do json
/*/

Function U_ZRESTPFC(_oJson, _cEmpFil, _cResp)
Local _aMsg			As Array
Local _oJsonRet		As Object

Private _aRetMsg := ZRESTPFCMsg()   //Carregar tabela com erros
Private _aMsgRet := {}				//carregar msg de errp

Default _cEmpFil	:= ""
Default _cResp		:= ""

Begin Sequence
	Conout("INICIANDO FUNCIONALIDADE ZRESTPFC em "+DtoC(Date())+" as "+Time())
	_aMsgRet 	:= {}

    If ZRESTPFCPR( @_oJson, _cEmpFil, _cResp, @_oJsonRet )
		U_ZRETMsgJson("ok","" , _oJsonRet )
		_aMsg := U_ZSetMsgJson()
	Else
		_aMsg := U_ZSetMsgJson()
	Endif
End Sequence

IF Len(_aMsg) == 0 		//Prevensão forçar o envia da mensagem para o REST
	_aMsg := U_ZSetMsgJson()
EndIf

Conout("TERMINO FUNCIONALIDADE ZRESTPFC em "+DtoC(Date())+" as "+Time())
Return _aMsg


/*/{Protheus.doc} ZRESTPFCPR
Recebe 		Json CLIENTE PUT 
@author 	DAC
@since 		20/03/2024
@version 	undefined
@param 		oJson
@type 		function
@ Obs		Os paremetros de token, empresa e filial serão enviados no cabeçalho reader Json
/*/
Static Function ZRESTPFCPR( _oJson, _cEmpFil, _cResp, _oJsonRet )
Local _cEmpresa     := ""	As Character
Local _cFilAtu      := ""	As Character
Local _lRet			:= .F.	As Logical
Local _nPos					As Numeric
//Local _cRespLib		:= AllTrim( superGetMv( "CAOA_RES03"	, , "00000000"		) )	
Begin Sequence
	_nPos := At(",", _cEmpFil)
	If _nPos <= 0 
		U_ZRETMsgJson("empresa","nao informada tag empresa")
        Break
    EndIf
	_cEmpresa := SubsTr(_cEmpFil,1,_nPos-1)
	_cFilAtu  := SubsTr(_cEmpFil,_nPos+1)

	If Empty(_cEmpresa)
		U_ZRETMsgJson("empresa","nao informada tag empresa")
        Break
	Endif
	If Empty(_cFilAtu)
		U_ZRETMsgJson("filial","nao informada a filial na tag empresa")
        Break
	Endif
	//Verifica a existencia empresa, para não ficar retornando erro 5, valida se a tabela esta abertar
	If Select("SM0") > 0
		SM0->(DbSetOrder(1))  //M0_CODIGO+M0_CODFIL
		If !SM0->(DbSeek(_cEmpresa+_cFilAtu))
			U_ZRETMsgJson("empresa","Dados da empresa inconsistentes")
        	Break
		Endif
	Endif
    //Tratar abertura da empresa conforme enviado no parametro
	If cEmpAnt <> _cEmpresa .or. cFilAnt <> _cFilAtu
    	RpcClearEnv() 
    	RPCSetType(3) 
    	If !RpcSetEnv(_cEmpresa,_cFilAtu,,,,GetEnvServer(),{ })
			U_ZRETMsgJson("ambiente","Nao foi possivel acessar ambiente")
        	Break
		Endif
	EndIf
	//Valida se esta cadastrado 
	/*
	If !_cResp	$ _cRespLib //.Or. ("_PRD" $ AllTrim(GetEnvServer()) .And. _cResp == STRZero(0,8))
		U_ZRETMsgJson("responsavel","Rensponsavel nao Autorizado")
        Break
	Endif
	*/
	//Verificar se existe cadastro fornecedor , o Genérico não sendo 
	SA2->(DbSetOrder(3))  //FILIAL + CGC
	// Valida os dados do oJson
	If !SA2->(DbSeek(FWxFilial("SA2")+_cResp))  //.And. _cResp <> STRZero(0,8)  //Deixar passar com tudo zero para validaçoes
		U_ZRETMsgJson("responsavel","Nao Autorizado, Falta Cadastro")
        Break
	Endif 	
	If !ValidOJson(@_oJson,)
		Break
	EndIf
	//processa json
	_lRet := ZRESTPFCGR(_oJson, @_oJsonRet )
End Sequence
Return _lRet


/*/{Protheus.doc} ZRESTPFCGR
Gravar dados do oJson Consulta
@author DAC - Denilso
@since 
@version undefined
@param 
@type function
/*/
Static Function ZRESTPFCGR(_oJson, _oJsonRet )
Local _lRet 		:= .F.				As Logical
Local _aCab			:= {}				As Array
Local _aItemRet		:= {}				As Array
Local _cAliasPesq	:= GetNextAlias()	As Character
Local _cPedido 		:= ""				As Character
Local _cPedCli		:= ""				As Character
Local _cCnPj 		:= ""				As Character
Local _cCnPjCpf		:= ""				AS Character
//Local _cPrevisao	:= ""				As Character
Local _cCodPrev		:= ""				As Character	
Local _cCampo 		:= ""				As Character
Local _cWhere 		:= ""				As Character
Local _cIdItem		:= ""				As Character
Local _cStatus    	:= ""				As Character 
Local _Ocorrencia 	:= ""				As Character 
Local _nQtdePed		:= 0 				As Numeric 
Local _nQtdeLib 	:= 0 				As Numeric
Local _nQtdeFat		:= 0 				As Numeric 

Begin Sequence 
	_cCnPjCpf	:= AllTrim(_oJson:GetJsonText("cnpjcpf"))  
	_cPedCli 	:= AllTrim(_oJson:GetJsonText("pedidovei"))
	_cCodPrev	:= AllTrim(_oJson:GetJsonText("previsaonr"))

	If SC6->(FieldPos("C6_XIDITEM")) > 0
		_cCampo += ", C6_XIDITEM "
	Endif
	If SC6->(FieldPos("C6_XRESSTA")) > 0
		_cCampo += ", C6_XRESSTA "
	Endif
	If SC6->(FieldPos("C6_XCODPVR")) > 0
		_cCampo += ", C6_XCODPVR "
	Endif
	_cCampo := "%"+_cCampo+"%"


	If !Empty(_cCodPrev)
		_cWhere := " AND SC6.C6_XCODPVR	= '"+_cCodPrev+"' " 
	Endif 
	_cWhere := "%"+_cWhere+"%"

	BeginSql Alias _cAliasPesq
		SELECT 	 SC6.C6_PEDCLI
				, SC6.C6_ITEM
				, SC6.C6_XCODPVR
				, SC6.C6_PRODUTO 
				, SC6.C6_NOTA
				, SC6.C6_SERIE
				, SC6.C6_DATFAT
				, SA1.A1_CGC
				, SC6.C6_XIDITEM
				, SC6.C6_QTDVEN AS QTDEPED
				, SC6.C6_QTDLIB AS QTDELIB
				, SC6.C6_QTDLIB AS QTDEFAT
				%Exp:_cCampo%
		FROM %Table:SC6% SC6
		JOIN %Table:SA1% SA1
			ON	SA1.%notDel%
			AND SA1.A1_FILIAL 	= %XFilial:SA1%
			AND SA1.A1_CGC		= %Exp:_cCnPjCpf%
       	WHERE SC6.C6_FILIAL  	= %XFilial:SC6%
			AND SC6.C6_PEDCLI 	= %Exp:_cPedcli%
		  	AND SC6.%notDel%		
			%Exp:_cWhere%
		ORDER BY SC6.C6_PEDCLI 
				, SA1.A1_CGC
				, SC6.C6_ITEM
	EndSql      
	If (_cAliasPesq)->(Eof())  
		U_ZRETMsgJson("pedcli","Pedido  "+_cPedcli+" nao localizado")
		Break
	Endif

	While (_cAliasPesq)->(!Eof())
		_aCab 		:= {} 
		_aItemRet	:= {}
		Aadd( _aCab, {"pedidovei"	, (_cAliasPesq)->C6_PEDCLI})
		Aadd( _aCab, {"cnpjcpf"		, (_cAliasPesq)->A1_CGC}) 
		Aadd( _aCab, {"previsaonr"	, If((_cAliasPesq)->C6_XCODPVR == "PREVISAO","",(_cAliasPesq)->C6_XCODPVR) }) 
		_cPedido 	:= (_cAliasPesq)->C6_PEDCLI
		_cCnPj 		:= (_cAliasPesq)->A1_CGC
		//_cPrevisao	:= (_cAliasPesq)->ZZP_CODPRV
		While (_cAliasPesq)->(!Eof()) .AND. _cPedido == (_cAliasPesq)->C6_PEDCLI .AND. _cCnPj == (_cAliasPesq)->A1_CGC //;
									  //.AND. _cPrevisao == (_cAliasPesq)->ZZP_CODPRV
			_aLinha		:= {}									  
			_cIdItem	:= If(SC6->(FieldPos("C6_XIDITEM")) > 0, (_cAliasPesq)->C6_XIDITEM, "")   
			_cStatus    := If(SC6->(FieldPos("C6_XRESSTA")) > 0, (_cAliasPesq)->C6_XRESSTA, "")	
			_Ocorrencia := ZRESTPFCLO(_cStatus)  //Localizar ocódigo de ocorrencia
			_nQtdePed 	:= (_cAliasPesq)->QTDEPED   //é realizado um a um 
			_nQtdeLib 	:= (_cAliasPesq)->QTDELIB   //é realizado um a um 
			_nQtdeFat 	:= If(!Empty((_cAliasPesq)->C6_NOTA) ,1,0)

			Aadd( _aLinha, {"iditem"				, _cIdItem })
			Aadd( _aLinha, {"status"				, _cStatus })
			Aadd( _aLinha, {"ocorrencia"			, _Ocorrencia })
			Aadd( _aLinha, {"qtderecebida"			, _nQtdePed })  //(_cAliasPesq)->QTDEPED
			Aadd( _aLinha, {"qtdeocorrencia"		, _nQtdeLib		})   //(_cAliasPesq)->QTDELIB 
			Aadd( _aLinha, {"qtdefaturada"			, _nQtdeFat 	})   //(_cAliasPesq)->QTDEFAT 
			Aadd( _aLinha, {"notafiscalnr"			, (_cAliasPesq)->C6_NOTA })
			Aadd( _aLinha, {"notafiscalserie"		, (_cAliasPesq)->C6_SERIE })
			Aadd( _aLinha, {"notafiscalemissao"		, (_cAliasPesq)->C6_DATFAT })
			Aadd( _aLinha, {"notafiscalxml"			, "" })
			Aadd( _aItemRet, _aLinha)
			(_cAliasPesq)->(DbSkip())
		EndDo
	EndDo 	
	_oJsonRet := U_ZFT030CT( _aCab, _aItemRet, /*_lJob*/)
	_lRet := .T.
End Sequence

If Select((_cAliasPesq)) <> 0
	(_cAliasPesq)->(DbCloseArea())
	Ferase(_cAliasPesq+GetDBExtension())
Endif 
Return _lRet 
	/*
			, ZZP.ZZP_CODPRV
			, CASE WHEN COALESCE(SC6.C6_QTDLIB,0) > 0   THEN  SC6.C6_QTDLIB  ELSE 0 END AS QTDEFAT

		LEFT JOIN %Table:ZZP% ZZP
			ON 	ZZP.%notDel%
			AND ZZP.ZZP_FILIAL  = SC6.C6_XFILPVR
			AND	ZZP.ZZP_CODPRV  = SC6.C6_XCODPVR

		GROUP BY SC6.C6_PEDCLI
				, SC6.C6_ITEM
				, SC6.C6_XCODPVR
				, SC6.C6_PRODUTO 
				, SC6.C6_NOTA
				, SC6.C6_SERIE
				, SC6.C6_DATFAT
				, SA1.A1_CGC
				, ZZP.ZZP_CODPRV
				, SC6.C6_QTDLIB				
	*/



//localizar o código de ocorrencia
Static Function ZRESTPFCLO(_cStatus)
Local _cRet  := ""	As Character
Local _nPos			As Numeric
Begin Sequence 
	If Empty(_cStatus)
		Break
	Endif
	For _nPos := 1 To Len(_aRetMsg)
		If _aRetMsg[_nPos,1] == Val(_cStatus)
			_cRet := _aRetMsg[_nPos,5]
		Endif
	Next
End Sequence
Return _cRet

/*/{Protheus.doc} ValidOJson
Valida os dados do oJson
@author DAC - Denilso
@since 
@version undefined
@param nCode, numeric, descricao
@param cMsg, characters, descricao
@type function
/*/
Static Function ValidOJson(_oJson, _cTipo)
Local _lRet		:= .T.	As Logical
Local _aMens 	:= {}	As Array
 	//Tem a função de validar os itens obrigatórios neste caso o vabeçalho ZWSRFUN.PRW
	_aMens := U_ZVLDOBRJ(_oJson, _aRetMsg, /*_lItem*/, /*_lTodos*/)
	If Len(_aMens) > 0
	  	_aMsgRet 	:= _aMens
		_lRet		:= .F.	
	Endif
Return _lRet



/*/{Protheus.doc} ZRESTPFCMsg
//Carrega Numero do Erro para retorno
@author DAC
@since 12/11/2021
@version undefined
@param _aMsg, array, descrição
@type function
/*/
Static Function ZRESTPFCMsg()
Local _aRet := {}	As Array
Begin Sequence
	//			Nr Ret	Tags Json			Item	Obrig	Descrição	
	Aadd(_aRet, {100,	"ok"				, .F.	, .F., 	"Item rcebido sendo processado"})
	Aadd(_aRet, {101,	"ok2"				, .F.	, .F., 	"Item gravado com sucesso"})

	Aadd(_aRet, {120,	"liberado"			, .F.	, .F., 	"Item liberado para fatuamento"})

	Aadd(_aRet, {150,	"faturado"			, .F.	, .F., 	"Fatuamento do item realizado com sucesso"})

	Aadd(_aRet, {300,	"empresa"			, .F.	, .F., 	"Empresa nao informada"})
	Aadd(_aRet, {301,	"filial"			, .F.	, .F., 	"Filial nao informada"})
	Aadd(_aRet, {302,	"token"				, .F.	, .F., 	"Token Invalido"})
	Aadd(_aRet, {303,	"ambiente"			, .F.	, .F., 	"Nao foi possivel acessar ambiente"})
	Aadd(_aRet, {304,	"responsavel"		, .F.	, .F., 	"Não Autorizado"})

	Aadd(_aRet, {400,	"cnpjcpf"			, .F.	, .T., 	"CNPJ e OU cpf COM problemas"})
	Aadd(_aRet, {401,	"nome"				, .F.	, .T., 	"Nome do Cliente com problemas"})
	Aadd(_aRet, {402,	"ierg"				, .F.	, .F., 	"Inscricao Estadual e ou R.G. com problemas"})
	Aadd(_aRet, {403,	"cep"				, .F.	, .F., 	"Cep do Cliente com problemas"})
	Aadd(_aRet, {404,	"endereco"			, .F.	, .T., 	"Endereço do Cliente com problemas"})
	Aadd(_aRet, {405,	"municipio"			, .F.	, .F., 	"Municipio do Cliente com problemas"})
	Aadd(_aRet, {406,	"estado"			, .F.	, .F., 	"Estado do Cliente com problemas"})
	Aadd(_aRet, {407,	"pais"				, .F.	, .T., 	"Pais do Cliente com problemas"})
	Aadd(_aRet, {408,	"email"				, .F.	, .F., 	"E-mail do Cliente com problemas"})
	//Aadd(_aRet, {409,	"tipocli"			, .F.	, .T., 	"Tipo do Cliente com problemas"})

	Aadd(_aRet, {450,	"nritem"			, .T.	, .T., 	"Problemas com numeração sequencial do item"})
	Aadd(_aRet, {451,	"cdmarca"			, .T.	, .T., 	"Problemas com a Marca Veiculo"})
	Aadd(_aRet, {452,	"cdgrupomod"		, .T.	, .T., 	"Problemas com Grupo Modelo Veículo "})
	Aadd(_aRet, {453,	"cdmodvei"			, .T.	, .T., 	"Problemas com Modelo Veículo"})
	Aadd(_aRet, {454,	"cdsegmod"			, .T.	, .T., 	"Problemas com Segmento Modelo do Veículo"})
	Aadd(_aRet, {455,	"anomodelo"			, .T.	, .T., 	"Problemas com Ano Modelo do Veículo"})
	Aadd(_aRet, {456,	"anofabricacao"		, .T.	, .T., 	"Problemas com o Ano de Fabricação do Veículo"})
	Aadd(_aRet, {457,	"cdcorexterna"		, .T.	, .T., 	"Problemas com ao Cor Externa Veiculo"})
	Aadd(_aRet, {458,	"cdcorinterna"		, .T.	, .T., 	"Problemas com ao Cor Interna Veiculo"})
	Aadd(_aRet, {459,	"cdopcional"		, .T.	, .F., 	"Problemas com Opcional Veículo"})
	Aadd(_aRet, {460,	"produto"			, .T.	, .F., 	"Problemas com Produto"})
	Aadd(_aRet, {461,	"qtdeitem"			, .T.	, .T., 	"Problemas com quantidade de item"})
	Aadd(_aRet, {462,	"valorunitario"		, .T.	, .F., 	"Problemas com valor unitario"})
	Aadd(_aRet, {463,	"cdoperacao"		, .T.	, .F., 	"Problemas com codigo operacao no item"})
	Aadd(_aRet, {464,	"iditem"			, .T.	, .T., 	"ID item"})
	Aadd(_aRet, {465,	"lccredito"			, .T.	, .F., 	"Limite de Credito não liberado"})
	Aadd(_aRet, {466,	"chassi"			, .T.	, .F., 	"Nao existem Chassis disponivel para veiculo"})
	Aadd(_aRet, {467,	"faturamento"		, .T.	, .F., 	"Problemas com o faturamento"})

	Aadd(_aRet, {500,	"conexao"			, .F.	, .T., 	"Problemas relativo a conexão"})

	Aadd(_aRet, {600,	"erropad"			, .F.	, .T., 	"Nao foi possivel atualizar Cliente"})
End Sequence
Return _aRet



/*
{
   "pedidovei":"021ABC000",
   "cnpjcpf":"10213051001399",
   "previsaonr":"00000001",
   "Itens":[
      {
         "iditem":"XXXXXXXX01",
         "status":"465",
         "ocorrencia":"Nao existem chassis disponivel para veiculo",
         "qtderecebida":3,
         "qtdeocorrencia":1,
         "qtdefaturada":0,
         "notafiscalnr":"",
         "notafiscalserie":"",
         "notafiscalemissao":"",
         "notafiscalxml":""
      },
      {
         "iditem":"XXXXXXXX01",
         "status":"150",
         "ocorrencia":"Faturamento do item realizado com sucesso",
         "qtderecebida":3,
         "qtdeocorrencia":0,
         "qtdefaturada":1,
         "notafiscalnr":"000000089",
         "notafiscalserie":"7  ",
         "notafiscalemissao":"20240920",
         "notafiscalxml":"formato xml "
      },
      {
         "iditem":"XXXXXXXX01",
         "status":"150",
         "ocorrencia":"Faturamento do item realizado com sucesso",
         "qtderecebida":3,
         "qtdeocorrencia":0,
         "qtdefaturada":1,
         "notafiscalnr":"000000090",
         "notafiscalserie":"7  ",
         "notafiscalemissao":"20240920",
         "notafiscalxml":"formato xml "
      },
      {
         "iditem":"XXXXXXXX02",
         "status":"100",
         "ocorrencia":"Faturamento do item realizado com sucesso",
         "qtderecebida":1,
         "qtdeocorrencia":0,
         "qtdefaturada":1,
         "notafiscalnr":"000000091",
         "notafiscalserie":"7  ",
         "notafiscalemissao":"20240920",
         "notafiscalxml":"formato xm "
      }
   ]
}

*/

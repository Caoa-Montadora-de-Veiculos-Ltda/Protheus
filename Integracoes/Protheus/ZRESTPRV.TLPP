#INCLUDE "TOTVS.CH"
#Include "FWMVCDEF.CH"
#INCLUDE "RESTFUL.CH"
#Include "PROTHEUS.CH"
#INCLUDE "TopConn.ch"
#INCLUDE "MSGRAPHI.CH"
#Include "FWMVCDEF.CH"
#Include "tlpp-core.th"

Static  _aAlterado 

#define CRLF chr(13) + chr(10)


/*/{Protheus.doc} ZRESTPRV
Serviço de integração Pedido Autoware 
@author 	DAC 
@since 		30/07/2024
@version 	undefined
@param		nao utilizado
@type 		User Function
@client   	CAOA 
@return   	_aMsg - Array com retorno Json código e ocorrencia
@project 	GAP228 -Integração Faturamento Autoware
/*/

FUNCTION U_ZRESTPRV(_oJson, _cEmpFil, _cResp)
Local _aMsg		:= {}

Private _aRetMsg := ZRESTPRVMsg()   	As Array	//Carregar tabela com erros
Private _aMsgRet := {}					As Array	//carregar msg de errp

Default _cEmpFil	:= ""
Default _cResp		:= ""

Begin Sequence
	Conout("INICIANDO FUNCIONALIDADE ZRESTSA1 em "+DtoC(Date())+" as "+Time())
	_aMsgRet 	:= {}

    If ZRESTPRVPR( @_oJson, _cEmpFil, _cResp )
		U_ZRETMsgJson("ok", )
		_aMsg := U_ZSetMsgJson()
	Else
		_aMsg := U_ZSetMsgJson()
	Endif

End Sequence

IF Len(_aMsg) == 0 		//Prevensão forçar o envia da mensagem para o REST
	_aMsg := U_ZSetMsgJson()
EndIf

Conout("TERMINO FUNCIONALIDADE ZRESTSA1 em "+DtoC(Date())+" as "+Time())
Return _aMsg


/*/{Protheus.doc} ZRESTPRVPR
Recebe 		Json Pedido POST 
@author 	DAC
@since 		
@version 	undefined
@param 		oJson
@type 		function
@ Obs		Os paremetros de token, empresa e filial serão enviados no cabeçalho reader Json
/*/
Static Function ZRESTPRVPR( _oJson, _cEmpFil, _cResp )
Local _cEmpresa     := ""
Local _cFilAtu      := ""
Local _lRet			:= .F.
//Local _cRespLib		:= AllTrim( superGetMv( "CAOA_AUT1C"	, , ""		) )	

Local _nPos
Begin Sequence
	_nPos := At(",", _cEmpFil)
	If _nPos <= 0 
		U_ZRETMsgJson("empresa","nao informada tag empresa")
        Break
    EndIf
	_cEmpresa := SubsTr(_cEmpFil,1,_nPos-1)
	_cFilAtu  := SubsTr(_cEmpFil,_nPos+1)

	If Empty(_cEmpresa)
		U_ZRETMsgJson("empresa","nao informada tag empresa")
        Break
	Endif
	If Empty(_cFilAtu)
		U_ZRETMsgJson("filial","nao informada a filial na tag empresa")
        Break
	Endif
	//Verifica a existencia empresa, para não ficar retornando erro 5, valida se a tabela esta abertar
	If Select("SM0") > 0
		SM0->(DbSetOrder(1))  //M0_CODIGO+M0_CODFIL
		If !SM0->(DbSeek(_cEmpresa+_cFilAtu))
			U_ZRETMsgJson("empresa","Dados da empresa inconsistentes")
        	Break
		Endif
	Endif
    //Tratar abertura da empresa conforme enviado no parametro
	If cEmpAnt <> _cEmpresa .or. cFilAnt <> _cFilAtu
    	RpcClearEnv() 
    	RPCSetType(3) 
    	If !RpcSetEnv(_cEmpresa,_cFilAtu,,,,GetEnvServer(),{ })
			U_ZRETMsgJson("ambiente","Nao foi possivel acessar ambiente")
        	Break
		Endif
	EndIf
	//Valida se esta cadastrado 
	/*
	If !_cResp	$ _cRespLib //.Or. ("_PRD" $ AllTrim(GetEnvServer()) .And. _cResp == STRZero(0,8))
		U_ZRETMsgJson("responsavel","Rensponsavel nao Autorizado")
        Break
	Endif
	*/
	//Verificar se existe cadastro fornecedor , o Genérico não sendo 
	SA2->(DbSetOrder(3))  //FILIAL + CGC
	// Valida os dados do oJson
	If !SA2->(DbSeek(FWxFilial("SA2")+_cResp))  //.And. _cResp <> STRZero(0,8)  //Deixar passar com tudo zero para validaçoes
		U_ZRETMsgJson("responsavel","Nao Autorizado, Falta Cadastro")
        Break
	Endif 	
	If !ValidOJson(@_oJson,)
		Break
	EndIf
	//processa json
	_lRet := ZRESTPRVGR(_oJson, _cEmpresa, _cFilAtu, _cResp)

End Sequence
Return _lRet


/*/{Protheus.doc} ZRESTPRVGR
Pre Validaçãp dos dados do oJson Pedido
@author DAC - Denilso
@since 
@version undefined
@param 
@type function
/*/
Static Function ZRESTPRVGR(_oJson, _cEmpresa, _cFilAtu, _cResp)
Local _lRet 		As Logical
Local _lNovo    	As Logical
Local _cTipoOper	As Character

Local _aCabSC5 		As Array	
Local _aItens  		As Array	
Local _aLinha 		As Array
//Local _aError		As Array
//Local _aCampos		As Array

Local _nOper 		As Numeric
Local _nTam			As Numeric
Local _nValTab		As Numeric
//Local _nReg			AS Numeric
//Local _nError		As Numeric
Local _nValUnit		As Numeric
Local _nPos			As Numeric
Local _nMoeda 		As Numeric 

Local _cNumPed		As Character
Local _cOper 		As Character 
Local _cCodTes		As Character
Local _cCodProd		As Character
Local _cItem 		As Character
Local _cPedCli 		As Character	
Local _cFabMod		As Character
Local _cCodMar 		As Character 
Local _cModVei 		As Character
Local _cSegMod 		As Character
Local _cGrupoMod 	As Character
Local _cCorInterna	As Character
Local _cCorExterna	As Character
//Local _cError 		AS Character
Local _cMsg			As Character
Local _cItemcta 	As Character
Local _cConta  		As Character
Local _cCLVL  		As Character  	
Local _cGrupoSB1	As Character
Local _cUnidade 	As Character
Local _cCodTransp 	As Character
Local _cTipoLib 	As Character
Local _cHsIni		As Character
Local _cStatusSC6	As Character
Local _cIdItem		//As Character	

Local _dDataIni 	As Date

Begin Sequence 
	_lRet 		:= .f. 
	//Função para retorno de códigos, verificar se existem pais estado e municipio, indiferente do cliente ser ou nao cadastrdos estas informações tem que estar fornecidas corretamente
	If !ZRESTPRVValida(_oJson, @_cCodTransp)
		Break
	Endif

	_aAlterado 	:= {}  //indicação de alteração do campo
	_aCabSC5	:= {}
	//_nOper		:= 3   //operação inclusão
	_cHsIni		:= SubsTr(Time(),1,5)
	_dDataIni	:= Date()
	_nMoeda		:= 1
	_cTipoLib	:= "1"
	_cTipoOper	:= AllTrim(_oJson:GetJsonText("tpoperacao"))
	_cStatusSC6 := "100" 
	
	If _cTipoOper == "1"	//inclui
		_lNovo := .T.
		_nOper := 3
	ElseIf _cTipoOper == "2"  //Altera
		_lNovo := .F.
		_nOper := 4
	ElseIf _cTipoOper == "3"  //Exclui
		_nOper := 5
	Endif

	_aCabSC5	:= {}
	_aItens 	:= {}
	_cPedCli 	:= AllTrim(_oJson:GetJsonText("pedidovei"))
	_cCgc		:= SA1->A1_CGC

	If _lNovo
		_cNumPed := "" //GetSxeNum("SC5","C5_NUM")
		Aadd( _aCabSC5, { "C5_FILIAL"	, FWxFilial('SC5')						, Nil } )         
		Aadd( _aCabSC5, { "C5_NUM"		, _cNumPed								, Nil } )         
	Else 
		_cNumPed := SC5->C5_NUM	
	Endif
	Aadd( _aCabSC5, { "C5_CLIENTE"	, SA1->A1_COD								, Nil } )         
	Aadd( _aCabSC5, { "C5_LOJACLI"	, SA1->A1_LOJA								, Nil } )         
	Aadd( _aCabSC5, { "C5_CLIENT"	, SA1->A1_COD								, Nil } )         
	Aadd( _aCabSC5, { "C5_LOJAENT"	, SA1->A1_LOJA								, Nil } )         
	Aadd( _aCabSC5, { "C5_EMISSAO"	, StoD(_oJson:GetJsonText("dataemissao"))	, Nil } )          
	Aadd( _aCabSC5, { "C5_CONDPAG"	, _oJson:GetJsonText("cdcondpgto")    		, Nil } )          
	Aadd( _aCabSC5, { "C5_NATUREZ"	, _oJson:GetJsonText("cdnatureza")   		, Nil } )         
	Aadd( _aCabSC5, { "C5_TIPLIB"	, "1"   									, Nil } )         
	Aadd( _aCabSC5, { "C5_MOEDA"	, _nMoeda									, Nil } )         
	Aadd( _aCabSC5, { "C5_TIPOCLI"	, SA1->A1_TIPO   							, Nil } )         
	Aadd( _aCabSC5, { "C5_TPFRETE"	, _oJson:GetJsonText("tpfrete")   			, Nil } )         
	Aadd( _aCabSC5, { "C5_TRANSP" 	, _cCodTransp   							, Nil } )        
	Aadd( _aCabSC5, { "C5_XTIPVEN" 	, _oJson:GetJsonText("tpvenda")   			, Nil } )        
	/* VERIFICAR SE SERA UTILIZADO NUMERO EXTERNO DO PEDIDO
		C5_NUMEXT	c	 36
	*/	 
	//processar os itens
	_cItem		:= CriaVar("C6_ITEM")
	_nTam 		:= Len(_oJson["Itens"])

	For _nPos := 1 To _nTam
		_aLinha		:= {}
		_nQtdeItem 	:= 	Val(AllTrim(_oJson["Itens"][_nPos]:GetJsonText("qtdeitem")))
		_cFabMod	:= AllTrim(_oJson["Itens"][_nPos]:GetJsonText("anofabricacao"))+AllTrim(_oJson["Itens"][_nPos]:GetJsonText("anomodelo"))
		_cCodMar 	:= AllTrim(_oJson["Itens"][_nPos]:GetJsonText("cdmarca"))
		_cModVei 	:= AllTrim(_oJson["Itens"][_nPos]:GetJsonText("cdmodvei"))
		_cSegMod 	:= AllTrim(_oJson["Itens"][_nPos]:GetJsonText("cdsegmod"))
		_cGrupoMod 	:= AllTrim(_oJson["Itens"][_nPos]:GetJsonText("cdgrupomod"))
		_cCorInterna:= AllTrim(_oJson["Itens"][_nPos]:GetJsonText("cdcorinterna"))
		_cCorExterna:= AllTrim(_oJson["Itens"][_nPos]:GetJsonText("cdcorexterna"))
		_nValUnit	:= Val(_oJson["Itens"][_nPos]:GetJsonText("valorunitario"))
		If SC6->(FieldPos("C6_XIDITEM"))
			_cIdItem := _oJson["Itens"][_nPos]:GetJsonText("iditem")    
		Endif
	    _cCodProd 	:= _cModVei + _cSegMod	//montagem do codigo produto
		_nValTab 	:= ZRESTPRVPTabela( _cCodMar, _cModVei, _cSegMod, _cFabMod)  //tabela de veiculo
		_lGrava		:= .T.
		//_nDesconto	:= Val(_oJson["Itens"][_nPos]:GetJsonText("desconto"))
		_cItem 		:= Soma1(_cItem)
		//localizar relacionamento veiculo
		If ! ZRESTPRVRVeiculo(_cCodProd, _cCodMar, _cModVei, _cSegMod, _cIdItem)  
			_lGrava := .F. 
			Exit
		Endif
		If !Empty(_oJson["Itens"][_nPos]:GetJsonText("cdoperacao"))
			_cOper := _oJson["Itens"][_nPos]:GetJsonText("cdoperacao")
		Endif	
		//valida Operação
		If !ZRESTPRVOper(@_cOper, @_cCodTes, _cItem, _cCodProd)
			_lGrava := .F. 
			Exit 
		Endif
		_cItemcta 	:= AllTrim(SB1->B1_ITEMCC)	
		_cConta  	:= AllTrim(SB1->B1_CONTA)
		_cCLVL    	:= AllTrim(SB1->B1_CLVL)
		_cGrupoSB1	:= AllTrim(SB1->B1_GRUPO)
		_cUnidade 	:= AllTrim(SB1->B1_UM)

		Aadd( _aLinha, { "C6_ITEM"		, _cItem					, Nil } )   
		Aadd( _aLinha, { "C6_PRODUTO"	, _cCodProd					, Nil } )   
		Aadd( _aLinha, { "C6_UM"		, _cUnidade					, Nil } )   
		Aadd( _aLinha, { "C6_QTDVEN"	, _nQtdeItem				, Nil } )   
		Aadd( _aLinha, { "C6_PRCVEN"	, _nValUnit					, Nil } )   
		Aadd( _aLinha, { "C6_VALOR"		, _nValUnit					, Nil } )   
		Aadd( _aLinha, { "C6_PRUNIT"	, _nValUnit					, Nil } )   
		Aadd( _aLinha, { "C6_OPER"		, _cOper					, Nil } )   
		Aadd( _aLinha, { "C6_TES"		, _cCodTes					, Nil } )   
		Aadd( _aLinha, { "C6_PEDCLI"	, _cPedCli					, Nil } )   
		Aadd( _aLinha, { "C6_XCODMAR"	, _cCodMar					, Nil } )   
		Aadd( _aLinha, { "C6_XMODVEI"	, _cModVei					, Nil } )   
		Aadd( _aLinha, { "C6_XDESMAR"	, VE1->VE1_DESMAR			, Nil } )   
		Aadd( _aLinha, { "C6_XCORINT"	, _cCorInterna				, Nil } )   
		Aadd( _aLinha, { "C6_XCOREXT"	, _cCorExterna				, Nil } )   
		Aadd( _aLinha, { "C6_XDESMOD"	, VV2->VV2_DESMOD			, Nil } )   
		Aadd( _aLinha, { "C6_XSEGMOD"	, _cSegMod					, Nil } )   
		Aadd( _aLinha, { "C6_XDESSEG"	, VVX->VVX_DESSEG  			, Nil } )   
		Aadd( _aLinha, { "C6_XFABMOD"	, _cFabMod					, Nil } )   
		Aadd( _aLinha, { "C6_XGRPMOD"	, _cGrupoMod				, Nil } )   
		Aadd( _aLinha, { "C6_XPRCTAB"	, _nValTab					, Nil } )   
		Aadd( _aLinha, { "C6_XVLRPRD"	, _nValTab					, Nil } )   
		Aadd( _aLinha, { "C6_XVLRMVT"	, _nValUnit					, Nil } )   
		Aadd( _aLinha, { "C6_XVLRVDA"	, _nValTab					, Nil } )   
		Aadd( _aLinha, { "C6_XBASST"	, VVP->VVP_BASEST			, Nil } )   
		Aadd( _aLinha, { "C6_ITEMCTA"	, _cItemcta					, Nil } )   
		Aadd( _aLinha, { "C6_CONTA"		, _cConta					, Nil } )   
		Aadd( _aLinha, { "C6_CLVL"		, _cCLVL					, Nil } )   

    	//Verificar como validar estes campos    
		Aadd( _aLinha, {  "C6_CHASSI"	, CriaVar("C6_CHASSI" )		,	Nil })  
		Aadd( _aLinha, {  "C6_LOCALIZ"	, CriaVar("C6_LOCALIZ")		,	Nil })   
		Aadd( _aLinha, {  "C6_NUMSERI"	, CriaVar("C6_NUMSERI")		,	Nil })   
		Aadd( _aLinha, {  "C6_LOTECTL"	, CriaVar("C6_LOTECTL")		,	Nil })   
		Aadd( _aLinha, {  "C6_DTVALID"	, CriaVar("C6_DTVALID")		,	Nil })   

		Aadd( _aLinha, {  "C6_XFILPVR"	, FWxFilial("ZZP")			,	Nil })   
		Aadd( _aLinha, {  "C6_XCODPVR"	, "PREVISAO"				,	Nil })   

		If SC6->(FieldPos("C6_XOPCION"))
			Aadd( _aLinha, {  "C6_XOPCION"	, AllTrim(_oJson["Itens"][_nPos]:GetJsonText("cdopcional")) 	, Nil })   
		Endif
		If SC6->(FieldPos("C6_XIDITEM"))
			Aadd( _aLinha, {  "C6_XIDITEM"	, _cIdItem 				, 	Nil })   
		Endif
		If SC6->(FieldPos("C6_XRESSTA")) > 0
			Aadd( _aLinha, {  "C6_XRESSTA"	, _cStatusSC6			, 	Nil })   
		Endif


    	Aadd( _aItens , _aLinha )
	Next _nPos 
	If ! _lGrava 
		Break
	Endif  
	If Len(_aCabSC5) == 0 .Or. Len(_aItens) == 0 
		U_ZRETMsgJson("erropad","Nao foi possivel carregar parametos dos campos para o Pedido "+_cPedCli+" !")
		Break 
	Endif	
	_lRet := .T.
    //Executa a inclusão do pedido e gravação da Previsão
	If _lRet 
		StartJob("U_ZFT030GP",GetEnvServer(),.F., _cPedCli, _cCgc, _aCabSC5, _aItens, _nOper,  cEmpAnt, cFilAnt)
	Endif
End Sequence
//Mensagens extraidas no processo, após gravar no log
_cMsg := ZRESTPRVMErros(_oJson, _cPedCli, _lNovo, _lRet) 
Return _lRet 


/*/{Protheus.doc} ZRESTPRVMErros
Monta msg de Erro a ser gravada
@author DAC - Denilso
@since 
@version undefined
@param 
@type function
/*/
Static Function ZRESTPRVMErros(_oJson,  _cPedCli, _lNovo, _lRet)
Local _cMsg		AS Character
Local _nError	AS Numeric
Local _nPos		AS Numeric
Local _cStatus  AS Character

_cMsg		:= ""
_nError	:= 0
	If _lRet 
		_cStatus 	:=	"1"
		_cMsg 		:=  "Pedido "+_cPedCli+If(_lNovo," Incluído"," Alterado")+" enviado para processo"+CRLF
	Else 
		_cStatus 	:=	"2"
		_cMsg 		:=  "Pedido "+_cPedCli+"referente a "+If(_lNovo,"inclusao","Alteracao")+" apresentou inconsistencias"+CRLF
		For _nPos := 1 To Len(_aMsgRet)
			_nError := _aMsgRet[_nPos,1]
			_cMsg 	+= StrZero(_nError,3)+" - "+_aMsgRet[_nPos,2] + CRLF
		Next
	Endif 
Return _cMsg


/*/{Protheus.doc} ZRESTPRVValida
Valida campos enviados no REST
@author DAC - Denilso
@since 
@version undefined
@param 
@type function
/*/
Static Function ZRESTPRVValida(_oJson, _cCodTransp)
Local _lRet 		AS Logical
Local _cAliasPesq   AS Character
Local _cPedCli		AS Character
Local _cTipoOper	AS Character
Local _cCnPjCpf		AS Character
Local _dTEmissao	AS Date
Local _dDataRef		AS Date
Local _cCondpgto	AS Character
Local _cNatureza 	AS Character
Local _cTipoVenda 	AS Character
Local _cTipoFrete 	AS Character
Local _cnpjtransp	AS Character
Local _cSelect		AS Character
Local _cTpFrestes	AS Character

Default _cMunicipio	:= ""
Default _cCodBancen	:= ""

Begin Sequence 
	_cAliasPesq   	:= GetNextAlias()
	_lRet 			:= .F.
	_cSelect		:= ""
	_dDataRef 		:= Date()-365
	_cTpFrestes  	:= "C_F_T_R_D_S"  //Tipos de frete a serem utilizados
	_cPedCli		:= AllTrim(_oJson:GetJsonText("pedidovei"))
	_cTipoOper		:= AllTrim(_oJson:GetJsonText("tpoperacao"))
	_cCnPjCpf		:= AllTrim(_oJson:GetJsonText("cnpjcpf"))  
	_dTEmissao		:= StoD(_oJson:GetJsonText("dataemissao"))
	_cCondpgto		:= AllTrim(_oJson:GetJsonText("cdcondpgto"))
	_cNatureza 		:= AllTrim(_oJson:GetJsonText("cdnatureza")) 	
	_cTipoVenda 	:= AllTrim(_oJson:GetJsonText("tpvenda"))
	_cTipoFrete 	:= AllTrim(_oJson:GetJsonText("tpfrete"))
	_cnpjtransp		:= AllTrim(_oJson:GetJsonText("cnpjtransp"))

	//Verificar Tipo de Operação 
	_cTipoOper	:= AllTrim(_oJson:GetJsonText("tpoperacao"))
	If !_cTipoOper $ "1_2_3"
		U_ZRETMsgJson("tpoperacao","Tipo de operacao invalida !")
		Break
	Endif  
	//não permitir data de emissão com mais de 1 ano atras
	If _dTEmissao < _dDataRef
		U_ZRETMsgJson("dataemissao","Data de emissao do Pedido invalida !")
		Break
	Endif

	If !Empty(_cTipoFrete) .And. !_cTipoFrete $ _cTpFrestes		
		U_ZRETMsgJson("tpfrete","Tipo de Frete Invalido !")
		Break
	Endif 

	BeginSql Alias _cAliasPesq
		SELECT 	 SC5.R_E_C_N_O_ AS NREGSC5
				,SC6.R_E_C_N_O_ AS NREGSC6
				,COALESCE(SA1.R_E_C_N_O_,0) NREGSA1 
		FROM %Table:SC6% SC6
		JOIN %Table:SC5% SC5
			ON  SC5.%notDel% 
			AND SC5.C5_FILIAL 	= %XFilial:SC5%
			AND SC5.C5_NUM 		= SC6.C6_NUM
		JOIN %Table:SA1% SA1
			ON	SA1.%notDel%
			AND SA1.A1_FILIAL 	= %XFilial:SA1%
			AND SA1.A1_CGC		= %Exp:_cCnPjCpf%
       	WHERE SC6.%notDel% 
			AND SC6.C6_FILIAL  	= %XFilial:SC6%
			AND SC6.C6_CLI		= SA1.A1_COD
			AND SC6.C6_LOJA		= SA1.A1_LOJA
			AND SC6.C6_PEDCLI 	= %Exp:_cPedCli%
	EndSql      
	//operação incluir 
	If (_cAliasPesq)->(!Eof()) .And. _cTipoOper == "1"
		U_ZRETMsgJson("pedido","Pedido "+_cPedCli+" ja cadastrado !")
		Break
	Endif
	//Quando não for inclusao tem que localizar pedido
	If (_cAliasPesq)->(Eof()) .And. _cTipoOper <> "1"
		U_ZRETMsgJson("pedido","Pedido "+_cPedCli+" nao localizado !")
		Break
	Endif 
	If  (_cAliasPesq)->NREGSC5 == 0 .And. _cTipoOper <> "1"
		U_ZRETMsgJson("pedido","Pedido "+_cPedCli+"  nao localizado !")
		Break
	Endif
	//Reposicionar SC5
	If (_cAliasPesq)->(!Eof()) .And. (_cAliasPesq)->NREGSC5 > 0 
		SC5->(DbGoto((_cAliasPesq)->NREGSC5))
	Endif 

	//Procurar os relacionamentos
	If Select((_cAliasPesq)) <> 0
		(_cAliasPesq)->(DbCloseArea())
	Endif 
	//Cliente Obrigatório
	BeginSql Alias _cAliasPesq
        %NoParser%
		SELECT COALESCE(SA1.R_E_C_N_O_,0) NREGSA1 
		FROM 	%Table:SA1% SA1
		WHERE  	SA1.%notDel%
			AND SA1.A1_FILIAL 	= %XFilial:SA1%
			AND SA1.A1_CGC		= %Exp:_cCnPjCpf%
	EndSql 
	If (_cAliasPesq)->(Eof())
		U_ZRETMsgJson("cnpjcpf","CNPJ "+_cCnPjCpf+" de cliente nao localizada !")
		Break
	Else 
		SA1->(DbGoto((_cAliasPesq)->NREGSA1))
	Endif 
	//Natureza da operação
	If  !Empty(_cNatureza)	
		If Select((_cAliasPesq)) <> 0
			(_cAliasPesq)->(DbCloseArea())
		Endif 
		BeginSql Alias _cAliasPesq
       	 	%NoParser%
			SELECT 	COALESCE(SED.R_E_C_N_O_,0) NREGSED 
			FROM 	%Table:SED% SED
			WHERE  	SED.%notDel%
				AND SED.ED_FILIAL 	= %XFilial:SED%
				AND SED.ED_CODIGO	= %Exp:_cNatureza%
		EndSql 
		If (_cAliasPesq)->(Eof())
			U_ZRETMsgJson("cdnatureza","Natureza "+_cNatureza+" nao localizada !")
			Break
		Else 
			SED->(DbGoto((_cAliasPesq)->NREGSED))
		Endif
	Endif 
	//condição de pgto
	If  !Empty(_cCondpgto) 
		If Select((_cAliasPesq)) <> 0
			(_cAliasPesq)->(DbCloseArea())
		Endif 
		BeginSql Alias _cAliasPesq
			SELECT 	COALESCE(SE4.R_E_C_N_O_,0) NREGSE4 
					FROM 	%Table:SE4% SE4
					WHERE  	SE4.%notDel%
						AND SE4.E4_FILIAL 	= %XFilial:SE4%
						AND SE4.E4_CODIGO	= %Exp:_cCondpgto%
		EndSql 
		If (_cAliasPesq)->(Eof())
			U_ZRETMsgJson("cdcondpgto","Condicao de pagamento "+_cCondpgto+" nao localizada!")
			Break
		Else 
			SE4->(DbGoto((_cAliasPesq)->NREGSE4))
		Endif 
	Endif 
	//Tipo de Venda
	If !Empty(_cnpjtransp) 
		If Select((_cAliasPesq)) <> 0
			(_cAliasPesq)->(DbCloseArea())
		Endif 
		BeginSql Alias _cAliasPesq
			SELECT 	COALESCE(SA4.R_E_C_N_O_,0) NREGSA4 
				FROM 	%Table:SA4% SA4
				WHERE  	SA4.%notDel%
					AND SA4.A4_FILIAL 	= %XFilial:SA4%
					AND SA4.A4_CGC 		= %Exp:_cnpjtransp%
		EndSql 
		If (_cAliasPesq)->(Eof())
			U_ZRETMsgJson("cnpjtransp","CNPJ "+_cnpjtransp+" da transportadora nao localizado !")
			Break
		Else 
			SA4->(DbGoto((_cAliasPesq)->NREGSA4))
			_cCodTransp := SA4->A4_COD
		Endif 
	Endif 
	//Tipo de Venda
	If !Empty(_cTipoVenda) 
		If Select((_cAliasPesq)) <> 0
			(_cAliasPesq)->(DbCloseArea())
		Endif 
		BeginSql Alias _cAliasPesq
			SELECT 	COALESCE(VV3.R_E_C_N_O_,0) NREGVV3 
			FROM 	%Table:VV3% VV3
			WHERE  	VV3.%notDel%
				AND VV3.VV3_FILIAL 	= %XFilial:VV3%
				AND VV3.VV3_TIPVEN	= %Exp:_cTipoVenda%
		EndSql 
		If (_cAliasPesq)->(Eof())
			U_ZRETMsgJson("tpvenda","Tipo de Venda  "+_cTipoVenda+" nao localizado !")
			Break
		Else 
			VV3->(DbGoto((_cAliasPesq)->NREGVV3))
		Endif
	Endif	
    //caso valide tudo passar para verdadeiso
	_lRet := .T.
End Sequence 
If !Empty(_cAliasPesq) .And. Select((_cAliasPesq)) <> 0
	(_cAliasPesq)->(DbCloseArea())
	Ferase(_cAliasPesq+GetDBExtension())
Endif 
Return _lRet

//localizar tabela de Veiculo
Static Function ZRESTPRVPTabela( _cCodMar, _cModVei, _cSegMod, _cFabMod)
Local _cAliasTab   := GetNextAlias()
Local _nValTab := 0
  	BeginSql Alias _cAliasTab
   		SELECT 	VVP.R_E_C_N_O_ NREGVVP
   		FROM %Table:VVP% VVP
   		WHERE 	VVP.VVP_FILIAL = %xFilial:VVP%
			AND VVP.VVP_CODMAR = %Exp:_cCodMar%
			AND VVP.VVP_MODVEI = %Exp:_cModVei%
			AND VVP.VVP_SEGMOD = %Exp:_cSegMod%
			AND VVP.VVP_FABMOD = %Exp:_cFabMod%
			AND VVP.%NotDel%			
	      	AND VVP.VVP_DATPRC = (  SELECT MAX(VVPB.VVP_DATPRC)  "
	      	                         FROM %Table:VVP% VVPB 
	      	                          WHERE VVPB.VVP_FILIAL = VVP.VVP_FILIAL 
		     	                    	AND VVPB.VVP_CODMAR	= VVP.VVP_CODMAR 
		     	                        AND VVPB.VVP_MODVEI	= VVP.VVP_MODVEI 
		     	                        AND VVPB.VVP_SEGMOD	= VVP.VVP_SEGMOD 
	      	                           	AND VVPB.VVP_FABMOD	= VVP.VVP_FABMOD 
                              			AND VVPB.%NotDel% ) 
   	EndSql
	If (_cAliasTab)->(!Eof())
		VVP->((_cAliasTab)->NREGVVP)
		_nValTab := VVP->VVP_VALTAB
	Endif 
If !Empty(_cAliasTab) .And. Select((_cAliasTab)) <> 0
	(_cAliasTab)->(DbCloseArea())
	Ferase(_cAliasTab+GetDBExtension())
Endif 
Return _nValTab


/*/{Protheus.doc} ZRESTPRVRVeiculo
localizar relacionamento veiculo
@author DAC - Denilso
@since 
@version undefined
@param 
@type function
/*/
Static Function ZRESTPRVRVeiculo(_cCodProd, _cCodMar, _cModVei, _cSegMod, _cIdItem)
Local _cAliasPesq   AS Character
Local _lRet			AS Logical		

Begin Sequence 
 	_cAliasPesq	:= GetNextAlias()
 	_lRet		:= .F.		

	If ValType(_cIdItem) == "N"  //Garantir que seja caracter
		_cIdItem := AllTrim(Str(_cIdItem))
	Endif
	BeginSql Alias _cAliasPesq
		SELECT 	 SB1.R_E_C_N_O_ AS NREGSB1 
		FROM %Table:SB1% SB1
       	WHERE SB1.%notDel% 
			AND SB1.B1_FILIAL  	= %XFilial:SB1%
			AND SB1.B1_COD 		= %Exp:_cCodProd%
	EndSql      
	//operação incluir
	If (_cAliasPesq)->(Eof()) .Or. (_cAliasPesq)->NREGSB1 == 0
		U_ZRETMsgJson("produto","Produto "+_cCodProd+" para o item "+_cIdItem+" nao localizado !")
		Break 
	Endif 
	SB1->(DbGoto((_cAliasPesq)->NREGSB1))
	(_cAliasPesq)->(DbCloseArea())
	//localizar marca
	BeginSql Alias _cAliasPesq
		SELECT 	VV2.R_E_C_N_O_ AS NREGVV2
		FROM 	%Table:VV2% VV2
        WHERE 	VV2.%notDel% 
			AND VV2.VV2_FILIAL = %XFilial:VV2%
			AND VV2.VV2_CODMAR = %Exp:_cCodMar%
			AND VV2.VV2_MODVEI = %Exp:_cModVei%
			AND VV2.VV2_SEGMOD = %Exp:_cSegMod%
	EndSql      
	If (_cAliasPesq)->(Eof()) .And. (_cAliasPesq)->NREGVV2
		U_ZRETMsgJson("cdmodvei","Modelo de Veiculo não encontrado na tabela de Modelos para o item"+_cIdItem+" !")
		Break
	Endif
	VV2->(DbGoto((_cAliasPesq)->NREGVV2))
	(_cAliasPesq)->(DbCloseArea())
	//Localizar Veiculo
	BeginSql Alias _cAliasPesq
		SELECT 	VE1.R_E_C_N_O_ AS NREGVE1
		FROM 	%Table:VE1% VE1
        WHERE 	VE1.%notDel% 
			AND VE1.VE1_FILIAL = %XFilial:VE1%
			AND VE1.VE1_CODMAR = %Exp:_cCodMar%
	EndSql      
	If (_cAliasPesq)->(Eof()) .And. (_cAliasPesq)->NREGVE1
		U_ZRETMsgJson("cdmodvei","Veiculo não encontrado na tabela de Veiculo para o item"+_cIdItem+" !")
		Break
	Endif
	(_cAliasPesq)->(DbCloseArea())
	//Localizar Descrição
	BeginSql Alias _cAliasPesq
		SELECT 	VVX.R_E_C_N_O_ AS NREGVVX
		FROM 	%Table:VVX% VVX
        WHERE 	VVX.%notDel% 
			AND VVX.VVX_FILIAL = %XFilial:VVX%
			AND VVX.VVX_CODMAR = %Exp:_cCodMar%
			AND VVX.VVX_SEGMOD = %Exp:_cSegMod%
	EndSql      
	If (_cAliasPesq)->(Eof()) .And. (_cAliasPesq)->NREGVVX
		U_ZRETMsgJson("cdmodvei","Tabela de descrição modelo não localizada não encontrado na tabela de vEÍCULOS para o item"+_cIdItem+" !")
		Break
	Endif
	_lRet := .T.
End Sequence
If !Empty(_cAliasPesq) .And. Select((_cAliasPesq)) <> 0
	(_cAliasPesq)->(DbCloseArea())
	Ferase(_cAliasPesq+GetDBExtension())
Endif 
Return _lRet 	


/*/{Protheus.doc} ZRESTPRVOper
localizar o tipo de operação
@author DAC - Denilso
@since 
@version undefined
@param 
@type function
/*/
Static Function ZRESTPRVOper(_cOper, _cCodTes, _cItem, _cCodProd )
//Local _cAliasPesq  AS Character
//Local _cTab 		AS Character
Local _lRet			AS Logical 
Local _cTesPar 		AS Character
Local _cOper1  		AS Character
Local _cOper2 		AS Character
Local _cOperIni 	AS Character

Private aHeader         := {}

	_lRet			:= .T.
	_cOper1  		:= AllTrim(SuperGetMV("CAOA_AUT1D", ,'92'))
	_cOper2 		:= AllTrim(SuperGetMV("CAOA_AUT1E", ,'93'))
	_cTesPar 		:= AllTrim(SuperGetMV("CAOA_AUT1F", ,'508'))
	_cOperIni 		:= _cOper

	//Caso  tenha sido informado operação
	If !Empty(_cOper)
    	_cCodTes := MaTesInt(2, _cOper, SA1->A1_COD, SA1->A1_LOJA, "C", _cCodProd, "C6_TES") 
	Endif 
	//não localizou cod da TES com operação enviada REST
	If Empty(_cCodTes) .And. !Empty(_cOper1)
		_cOper 		:= _cOper1
    	_cCodTes 	:= MaTesInt(2, _cOper, SA1->A1_COD, SA1->A1_LOJA, "C", _cCodProd, "C6_TES") 
	Endif 
	//não localizou cod da TES com operação 1 pre definaida tentar com operação 2 pre definida
	If Empty(_cCodTes) .And. !Empty(_cOper2)
		_cOper 		:= _cOper2
    	_cCodTes 	:= MaTesInt(2, _cOper, SA1->A1_COD, SA1->A1_LOJA, "C", _cCodProd, "C6_TES") 
	Endif		
	//caso não localize ainda tenho a TES do parâmetro
	_cOper := If(Empty(_cOperIni), _cOper1, _cOperIni)
	If Empty(_cCodTes) .And. !Empty(_cTesPar)
		_cCodTes := _cTesPar 
	Endif
	//Se continuar em branco problemas com TES
	If Empty(_cCodTes) //.Or. Empty(_cOper)
		U_ZRETMsgJson("cdoperacao","Nao localizado regra para a operacao referente ao item "+_cItem+" !")
		_lRet := .F.
	Endif
Return _lRet 	


/*/{Protheus.doc} ValidOJson
Valida os dados do oJson
@author 	DAC - Denilso
@since 
@version 	undefined
@param 		_oJson, _cTipo
@type function
/*/
Static Function ValidOJson(_oJson, _cTipo)
Local _lRet		AS Logical
Local _aMens 	As Character

	_lRet		:= .T.
	_aMens 		:= {}
 	//Tem	 a função de validar os itens obrigatórios neste caso o vabeçalho ZWSRFUN.PRW
	_aMens := U_ZVLDOBRJ(_oJson, _aRetMsg, /*_lItem*/, /*_lTodos*/)
	If Len(_aMens) > 0
	  	_aMsgRet 	:= _aMens
		_lRet		:= .F.	
	Endif
Return _lRet



/*/{Protheus.doc} ZRESTPRVMsg
Carrega Numero do Erro para retorno
@author 	DAC
@since 		
@version 	undefined
@param 
@type 		function
/*/
Static Function ZRESTPRVMsg()
Local _aRet AS Array
Begin Sequence
	_aRet := {}
	//			Nr Ret	Tags Json			Item	Obrig	Descrição	
	Aadd(_aRet, {100,	"ok"				, .F.	, .F., 	"Pedido recebido, realizando processamento"})

	//Aadd(_aRet, {205,	"ok"				, .F.	, .F., 	"Pedido recebido, realizando processamento"})

	Aadd(_aRet, {300,	"empresa"			, .F.	, .F., 	"Empresa nao informada"})
	Aadd(_aRet, {301,	"filial"			, .F.	, .F., 	"Filial nao informada"})
	Aadd(_aRet, {302,	"token"				, .F.	, .F., 	"Token Invalido"})
	Aadd(_aRet, {303,	"ambiente"			, .F.	, .F., 	"Nao foi possivel acessar ambiente"})
	Aadd(_aRet, {304,	"responsavel"		, .F.	, .F., 	"Não Autorizado"})

	Aadd(_aRet, {400,	"cnpjcpf"			, .F.	, .T., 	"Problemas encontrados referente ao CNPJ e ou CPF do Cliente"})
	Aadd(_aRet, {401,	"pedidovei"			, .F.	, .T., 	"Problemas encontrados no numero de Pedido"})
	Aadd(_aRet, {402,	"tpoperacao"		, .F.	, .T., 	"Problemas encontrados no tipo de operação"})
	Aadd(_aRet, {403,	"dataemissao"		, .F.	, .T., 	"Problemas encontrados com data de emissao"})
	Aadd(_aRet, {404,	"cdcondpgto"		, .F.	, .T., 	"Problemas encontrados na condição Pgto"})
	Aadd(_aRet, {405,	"cdnatureza"		, .F.	, .T., 	"Problemas encontrados com Natureza"})
	Aadd(_aRet, {406,	"tpvenda"			, .F.	, .T., 	"Problemas encontrados com Tipo de Venda"})
	Aadd(_aRet, {407,	"tpfrete"			, .F.	, .F., 	"Problemas encontrados no tipo de Frete"})
	Aadd(_aRet, {408,	"cdtransporte"		, .F.	, .F., 	"Problemas encontrados com a Transportadora"})

	Aadd(_aRet, {450,	"nritem"			, .T.	, .T., 	"Problemas com numeração sequencial do item"})
	Aadd(_aRet, {451,	"cdmarca"			, .T.	, .T., 	"Problemas com a Marca Veiculo"})
	Aadd(_aRet, {452,	"cdgrupomod"		, .T.	, .T., 	"Problemas com Grupo Modelo Veículo "})
	Aadd(_aRet, {453,	"cdmodvei"			, .T.	, .T., 	"Problemas com Modelo Veículo"})
	Aadd(_aRet, {454,	"cdsegmod"			, .T.	, .T., 	"Problemas com Segmento Modelo do Veículo"})
	Aadd(_aRet, {455,	"anomodelo"			, .T.	, .T., 	"Problemas com Ano Modelo do Veículo"})
	Aadd(_aRet, {456,	"anofabricacao"		, .T.	, .T., 	"Problemas com o Ano de Fabricação do Veículo"})
	Aadd(_aRet, {457,	"cdcorexterna"		, .T.	, .T., 	"Problemas com ao Cor Externa Veiculo"})
	Aadd(_aRet, {458,	"cdcorinterna"		, .T.	, .T., 	"Problemas com ao Cor Interna Veiculo"})
	Aadd(_aRet, {459,	"cdopcional"		, .T.	, .F., 	"Problemas com Opcional Veículo"})
	Aadd(_aRet, {460,	"produto"			, .T.	, .F., 	"Problemas com Produto"})
	Aadd(_aRet, {461,	"qtdeitem"			, .T.	, .T., 	"Problemas com quantidade de item"})
	Aadd(_aRet, {462,	"valorunitario"		, .T.	, .F., 	"Problemas com valor unitario"})
	Aadd(_aRet, {463,	"cdoperacao"		, .T.	, .F., 	"Problemas com codigo operacao no item"})
	Aadd(_aRet, {464,	"iditem"			, .T.	, .T., 	"ID item"})

	Aadd(_aRet, {500,	"conexao"			, .F.	, .T., 	"Problemas relativo a conexão"})

	Aadd(_aRet, {600,	"erropad"			, .F.	, .T., 	"Problemas com erros no Padrão"})
End Sequence
Return _aRet



/*

{
   "pedidovei":"021ABD013",
   "cnpjcpf":"19306933000130",
   "tpoperacao":"1",
   "dataemissao":"20240804",
   "cdcondpgto":"005",
   "cdnatureza":"1202",
   "tpvenda":"01",
   "tpfrete":"C",
   "cnpjtransp":"",
   "Itens":[
      {
         "cdmarca":"CHE",
         "cdgrupomod":"000002",
         "cdmodvei":"T1DW7L4HH",
         "cdsegmod":"C891TRYWAP",
         "anofabricacao":"2024",
         "anomodelo":"2025",
         "cdcorexterna":"BLP",
         "cdcorinterna":"TRY",
         "cdopcional":"",
         "qtdeitem":1,
         "valorunitario":0,
         "cdoperacao":"",
         "iditem":"XXXXXXXX01"
      },
      {
         "cdmarca":"CHE",
         "cdgrupomod":"000002",
         "cdmodvei":"T1DW7L4HH",
         "cdsegmod":"C891TRYWAP",
         "anofabricacao":"2024",
         "anomodelo":"2025",
         "cdcorexterna":"BLP",
         "cdcorinterna":"TRY",
         "cdopcional":"",
         "qtdeitem":1,
         "valorunitario":0,
         "cdoperacao":"",
         "iditem":"XXXXXXXX02"
      },
      {
         "cdmarca":"CHE",
         "cdgrupomod":"000002",
         "cdmodvei":"T1DW7L4HH",
         "cdsegmod":"C891TRYWAP",
         "anofabricacao":"2024",
         "anomodelo":"2025",
         "cdcorexterna":"BLP",
         "cdcorinterna":"TRY",
         "cdopcional":"",
         "qtdeitem":1,
         "valorunitario":0,
         "cdoperacao":"",
         "iditem":"XXXXXXXX03"
      },
      {
         "cdmarca":"CHE",
         "cdgrupomod":"000002",
         "cdmodvei":"T1EW5L4FP",
         "cdsegmod":"C506TRYWAP",
         "anofabricacao":"2024",
         "anomodelo":"2025",
         "cdcorexterna":"BLP",
         "cdcorinterna":"TRY",
         "cdopcional":"C755  ",
         "qtdeitem":1,
         "valorunitario":0,
         "cdoperacao":"",
         "iditem":"XXXXXXXX04"
      },
      {
         "cdmarca":"CHE",
         "cdgrupomod":"000002",
         "cdmodvei":"T1EW5L4FP",
         "cdsegmod":"C506TRYWAP",
         "anofabricacao":"2024",
         "anomodelo":"2025",
         "cdcorexterna":"BLP",
         "cdcorinterna":"TRY",
         "cdopcional":"C755  ",
         "qtdeitem":1,
         "valorunitario":0,
         "cdoperacao":"",
         "iditem":"XXXXXXXX05"
      }
   ]
}

*/
